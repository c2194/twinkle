
F070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800383c  0800383c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800383c  0800383c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800383c  0800383c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  2000001c  08003860  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08003860  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008fe3  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c4  00000000  00000000  0002906a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cb  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f836  00000000  00000000  0002bafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b61e  00000000  00000000  0003b331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00060d39  00000000  00000000  0004694f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023f4  00000000  00000000  000a7688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000a9a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037f4 	.word	0x080037f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	080037f4 	.word	0x080037f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <scan_wave>:
/* USER CODE BEGIN 0 */

int adc_average[5] = {0};

uint8_t scan_wave(uint8_t arrayPO, uint8_t scan_start_po)
{ // 扫描波形 超出波动范围的次数记录再bx_U和bx_D中,这里还应该修改一下，给定一个检测起点，然后从起点开始检测，就近N个数据的波动情况，而不应该是全部的数据
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	701a      	strb	r2, [r3, #0]

  bx_Ds = 0;
 8000232:	4b6a      	ldr	r3, [pc, #424]	; (80003dc <scan_wave+0x1bc>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
  bx_Us = 0;
 8000238:	4b69      	ldr	r3, [pc, #420]	; (80003e0 <scan_wave+0x1c0>)
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
  uint8_t out_range_u = 0;
 800023e:	230f      	movs	r3, #15
 8000240:	18fb      	adds	r3, r7, r3
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
  uint8_t out_range_d = 0;
 8000246:	230e      	movs	r3, #14
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
  uint8_t re = 0;
 800024e:	230d      	movs	r3, #13
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 80; i++)
 8000256:	230c      	movs	r3, #12
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	e078      	b.n	8000352 <scan_wave+0x132>
  {
    if (adc_list[arrayPO][scan_start_po] > adc_average[arrayPO] + wave_range)
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	1dbb      	adds	r3, r7, #6
 8000266:	7818      	ldrb	r0, [r3, #0]
 8000268:	495e      	ldr	r1, [pc, #376]	; (80003e4 <scan_wave+0x1c4>)
 800026a:	0013      	movs	r3, r2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	189b      	adds	r3, r3, r2
 8000270:	011b      	lsls	r3, r3, #4
 8000272:	181b      	adds	r3, r3, r0
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	585a      	ldr	r2, [r3, r1]
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	7819      	ldrb	r1, [r3, #0]
 800027c:	4b5a      	ldr	r3, [pc, #360]	; (80003e8 <scan_wave+0x1c8>)
 800027e:	0089      	lsls	r1, r1, #2
 8000280:	58c9      	ldr	r1, [r1, r3]
 8000282:	4b5a      	ldr	r3, [pc, #360]	; (80003ec <scan_wave+0x1cc>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	18cb      	adds	r3, r1, r3
 8000288:	429a      	cmp	r2, r3
 800028a:	dd14      	ble.n	80002b6 <scan_wave+0x96>
    {
      if (i > po_most_at)
 800028c:	230c      	movs	r3, #12
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	781a      	ldrb	r2, [r3, #0]
 8000292:	4b57      	ldr	r3, [pc, #348]	; (80003f0 <scan_wave+0x1d0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	429a      	cmp	r2, r3
 8000298:	dd06      	ble.n	80002a8 <scan_wave+0x88>
      {
        out_range_u++;
 800029a:	210f      	movs	r1, #15
 800029c:	187b      	adds	r3, r7, r1
 800029e:	781a      	ldrb	r2, [r3, #0]
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	3201      	adds	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	e030      	b.n	800030a <scan_wave+0xea>
      }
      else
      {
        bx_Us++;
 80002a8:	4b4d      	ldr	r3, [pc, #308]	; (80003e0 <scan_wave+0x1c0>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b4b      	ldr	r3, [pc, #300]	; (80003e0 <scan_wave+0x1c0>)
 80002b2:	701a      	strb	r2, [r3, #0]
 80002b4:	e029      	b.n	800030a <scan_wave+0xea>
      }
    }
    else if (adc_list[arrayPO][scan_start_po] < adc_average[arrayPO] - wave_range)
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781a      	ldrb	r2, [r3, #0]
 80002ba:	1dbb      	adds	r3, r7, #6
 80002bc:	7818      	ldrb	r0, [r3, #0]
 80002be:	4949      	ldr	r1, [pc, #292]	; (80003e4 <scan_wave+0x1c4>)
 80002c0:	0013      	movs	r3, r2
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	189b      	adds	r3, r3, r2
 80002c6:	011b      	lsls	r3, r3, #4
 80002c8:	181b      	adds	r3, r3, r0
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	585a      	ldr	r2, [r3, r1]
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	7819      	ldrb	r1, [r3, #0]
 80002d2:	4b45      	ldr	r3, [pc, #276]	; (80003e8 <scan_wave+0x1c8>)
 80002d4:	0089      	lsls	r1, r1, #2
 80002d6:	58c9      	ldr	r1, [r1, r3]
 80002d8:	4b44      	ldr	r3, [pc, #272]	; (80003ec <scan_wave+0x1cc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	1acb      	subs	r3, r1, r3
 80002de:	429a      	cmp	r2, r3
 80002e0:	da13      	bge.n	800030a <scan_wave+0xea>
    {
      if (i > po_most_at)
 80002e2:	230c      	movs	r3, #12
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	4b41      	ldr	r3, [pc, #260]	; (80003f0 <scan_wave+0x1d0>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dd06      	ble.n	80002fe <scan_wave+0xde>
      {
        out_range_d++;
 80002f0:	210e      	movs	r1, #14
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	781a      	ldrb	r2, [r3, #0]
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	3201      	adds	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
 80002fc:	e005      	b.n	800030a <scan_wave+0xea>
      }
      else
      {
        bx_Ds++;
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <scan_wave+0x1bc>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <scan_wave+0x1bc>)
 8000308:	701a      	strb	r2, [r3, #0]
      }
    }

    if (scan_start_po == 0)
 800030a:	1dbb      	adds	r3, r7, #6
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d103      	bne.n	800031a <scan_wave+0xfa>
    {
      scan_start_po = 79;
 8000312:	1dbb      	adds	r3, r7, #6
 8000314:	224f      	movs	r2, #79	; 0x4f
 8000316:	701a      	strb	r2, [r3, #0]
 8000318:	e004      	b.n	8000324 <scan_wave+0x104>
    }
    else
    {
      scan_start_po--;
 800031a:	1dbb      	adds	r3, r7, #6
 800031c:	781a      	ldrb	r2, [r3, #0]
 800031e:	1dbb      	adds	r3, r7, #6
 8000320:	3a01      	subs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
    }
    adc_list[arrayPO][i] = adc_average[arrayPO];
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	7819      	ldrb	r1, [r3, #0]
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781a      	ldrb	r2, [r3, #0]
 800032c:	250c      	movs	r5, #12
 800032e:	197b      	adds	r3, r7, r5
 8000330:	781c      	ldrb	r4, [r3, #0]
 8000332:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <scan_wave+0x1c8>)
 8000334:	0089      	lsls	r1, r1, #2
 8000336:	58c8      	ldr	r0, [r1, r3]
 8000338:	492a      	ldr	r1, [pc, #168]	; (80003e4 <scan_wave+0x1c4>)
 800033a:	0013      	movs	r3, r2
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	189b      	adds	r3, r3, r2
 8000340:	011b      	lsls	r3, r3, #4
 8000342:	191b      	adds	r3, r3, r4
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	5058      	str	r0, [r3, r1]
  for (uint8_t i = 0; i < 80; i++)
 8000348:	197b      	adds	r3, r7, r5
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	197b      	adds	r3, r7, r5
 800034e:	3201      	adds	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	230c      	movs	r3, #12
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b4f      	cmp	r3, #79	; 0x4f
 800035a:	d981      	bls.n	8000260 <scan_wave+0x40>
  }
  bx_Ps = 80 - bx_Ds - bx_Us;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <scan_wave+0x1bc>)
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <scan_wave+0x1c0>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	18d3      	adds	r3, r2, r3
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2250      	movs	r2, #80	; 0x50
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <scan_wave+0x1d4>)
 8000370:	701a      	strb	r2, [r3, #0]
  //  bx_Ds 在最大的波动范围内的下降趋势次数
  //  bx_Us 在最大的波动范围内的上升趋势次数
  //  out_range_u 超出最大波动位数的次数外，还有多少次超出向上波动范围
  //  out_range_d 超出最大波动位数的次数外，还有多少次超出 向下 波动范围

  if (bx_Us > po_least_at && bx_Us < po_most_at) // 符合波动位数范围内 的 上升趋势数量
 8000372:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <scan_wave+0x1c0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001a      	movs	r2, r3
 8000378:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <scan_wave+0x1d8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	dd0f      	ble.n	80003a0 <scan_wave+0x180>
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <scan_wave+0x1c0>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	001a      	movs	r2, r3
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <scan_wave+0x1d0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	da08      	bge.n	80003a0 <scan_wave+0x180>
  {
    if (out_range_u < 4) // 超出波动范围的次数不多
 800038e:	230f      	movs	r3, #15
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d803      	bhi.n	80003a0 <scan_wave+0x180>
    {
      re = 1;
 8000398:	230d      	movs	r3, #13
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	2201      	movs	r2, #1
 800039e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (bx_Ds > po_least_at && bx_Ds < po_most_at) // 符合波动位数范围内 的 下降趋势数量
 80003a0:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <scan_wave+0x1bc>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	001a      	movs	r2, r3
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <scan_wave+0x1d8>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dd0f      	ble.n	80003ce <scan_wave+0x1ae>
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <scan_wave+0x1bc>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	001a      	movs	r2, r3
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <scan_wave+0x1d0>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	da08      	bge.n	80003ce <scan_wave+0x1ae>
  {
    if (out_range_d < 4) // 超出波动范围的次数不多
 80003bc:	230e      	movs	r3, #14
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b03      	cmp	r3, #3
 80003c4:	d803      	bhi.n	80003ce <scan_wave+0x1ae>
    {
      re = 1;
 80003c6:	230d      	movs	r3, #13
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
    }
  }

  return re;
 80003ce:	230d      	movs	r3, #13
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	781b      	ldrb	r3, [r3, #0]
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b004      	add	sp, #16
 80003da:	bdb0      	pop	{r4, r5, r7, pc}
 80003dc:	2000067d 	.word	0x2000067d
 80003e0:	2000067e 	.word	0x2000067e
 80003e4:	2000003c 	.word	0x2000003c
 80003e8:	2000082c 	.word	0x2000082c
 80003ec:	20000008 	.word	0x20000008
 80003f0:	20000004 	.word	0x20000004
 80003f4:	2000067f 	.word	0x2000067f
 80003f8:	20000000 	.word	0x20000000

080003fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003fc:	b5b0      	push	{r4, r5, r7, lr}
 80003fe:	b0a8      	sub	sp, #160	; 0xa0
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f001 f845 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 fb65 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 fdc5 	bl	8000f98 <MX_GPIO_Init>
  MX_ADC_Init();
 800040e:	f000 fbb3 	bl	8000b78 <MX_ADC_Init>
  MX_TIM17_Init();
 8000412:	f000 fd99 	bl	8000f48 <MX_TIM17_Init>
  MX_TIM16_Init();
 8000416:	f000 fd71 	bl	8000efc <MX_TIM16_Init>
  MX_TIM14_Init();
 800041a:	f000 fd4b 	bl	8000eb4 <MX_TIM14_Init>
  MX_TIM1_Init();
 800041e:	f000 fc39 	bl	8000c94 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000422:	f000 fccf 	bl	8000dc4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // 打开tim1 pwm输出
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000426:	4b4b      	ldr	r3, [pc, #300]	; (8000554 <main+0x158>)
 8000428:	2104      	movs	r1, #4
 800042a:	0018      	movs	r0, r3
 800042c:	f002 fbdc 	bl	8002be8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000430:	4b49      	ldr	r3, [pc, #292]	; (8000558 <main+0x15c>)
 8000432:	2104      	movs	r1, #4
 8000434:	0018      	movs	r0, r3
 8000436:	f002 fbd7 	bl	8002be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800043a:	4b47      	ldr	r3, [pc, #284]	; (8000558 <main+0x15c>)
 800043c:	2100      	movs	r1, #0
 800043e:	0018      	movs	r0, r3
 8000440:	f002 fbd2 	bl	8002be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000444:	4b44      	ldr	r3, [pc, #272]	; (8000558 <main+0x15c>)
 8000446:	210c      	movs	r1, #12
 8000448:	0018      	movs	r0, r3
 800044a:	f002 fbcd 	bl	8002be8 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(OUT_PORT_4, OUT_PIN_4, GPIO_PIN_SET);
 800044e:	2390      	movs	r3, #144	; 0x90
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2201      	movs	r2, #1
 8000454:	2120      	movs	r1, #32
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fe7e 	bl	8002158 <HAL_GPIO_WritePin>

  // 打开tim17中断
  HAL_TIM_Base_Start_IT(&htim17);
 800045c:	4b3f      	ldr	r3, [pc, #252]	; (800055c <main+0x160>)
 800045e:	0018      	movs	r0, r3
 8000460:	f002 fb2c 	bl	8002abc <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc);
 8000464:	4b3e      	ldr	r3, [pc, #248]	; (8000560 <main+0x164>)
 8000466:	0018      	movs	r0, r3
 8000468:	f001 f9b6 	bl	80017d8 <HAL_ADC_Start>

  uint8_t i = 0;
 800046c:	239f      	movs	r3, #159	; 0x9f
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
  uint32_t summation[5] = {0};
 8000474:	2370      	movs	r3, #112	; 0x70
 8000476:	18fb      	adds	r3, r7, r3
 8000478:	0018      	movs	r0, r3
 800047a:	2314      	movs	r3, #20
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f003 f98c 	bl	800379c <memset>
  uint8_t pw[5] = {0};
 8000484:	2368      	movs	r3, #104	; 0x68
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	2200      	movs	r2, #0
 800048e:	711a      	strb	r2, [r3, #4]
  uint8_t scanstate = 0; // 0 校准状�?? 1 等待变化状�??
 8000490:	238f      	movs	r3, #143	; 0x8f
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
  uint8_t steady[5] = {0};
 8000498:	2360      	movs	r3, #96	; 0x60
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	2200      	movs	r2, #0
 80004a2:	711a      	strb	r2, [r3, #4]
  uint8_t steady_add = 0;
 80004a4:	238e      	movs	r3, #142	; 0x8e
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
  uint16_t the_aValue[5] = {0};
 80004ac:	2354      	movs	r3, #84	; 0x54
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	0018      	movs	r0, r3
 80004b2:	230a      	movs	r3, #10
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f003 f970 	bl	800379c <memset>
  int bx_U[5] = {0};
 80004bc:	2340      	movs	r3, #64	; 0x40
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	0018      	movs	r0, r3
 80004c2:	2314      	movs	r3, #20
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f003 f968 	bl	800379c <memset>
  int bx_D[5] = {0};
 80004cc:	232c      	movs	r3, #44	; 0x2c
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	0018      	movs	r0, r3
 80004d2:	2314      	movs	r3, #20
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f003 f960 	bl	800379c <memset>
  int bx_P[5] = {0};
 80004dc:	2318      	movs	r3, #24
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	0018      	movs	r0, r3
 80004e2:	2314      	movs	r3, #20
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f003 f958 	bl	800379c <memset>
  int bx_U_up[5] = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 f951 	bl	800379c <memset>

  uint8_t out_state = 0;
 80004fa:	238d      	movs	r3, #141	; 0x8d
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]

  uint16_t on_time = 200;
 8000502:	238a      	movs	r3, #138	; 0x8a
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	22c8      	movs	r2, #200	; 0xc8
 8000508:	801a      	strh	r2, [r3, #0]

  uint8_t steady_po = 0;     // 对比了多少位
 800050a:	2389      	movs	r3, #137	; 0x89
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (TIM17_flag == 1)
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <main+0x168>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d1fb      	bne.n	8000512 <main+0x116>
    {

      if (out_time > 0) // out_time  需要大于 80 大于的数量就是 输出电平的时间，80是一个静默期，在此期间内不输出电平
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <main+0x16c>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d038      	beq.n	8000594 <main+0x198>
      {
        out_time--;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <main+0x16c>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	3b01      	subs	r3, #1
 8000528:	b29a      	uxth	r2, r3
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0x16c>)
 800052c:	801a      	strh	r2, [r3, #0]
        if (out_time > 80)
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <main+0x16c>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2b50      	cmp	r3, #80	; 0x50
 8000534:	d91c      	bls.n	8000570 <main+0x174>
        {
          HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <main+0x170>)
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fe0b 	bl	8002158 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(OUT_LINE_PORT, OUT_LINE_PIN, GPIO_PIN_SET);
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	0159      	lsls	r1, r3, #5
 8000546:	2390      	movs	r3, #144	; 0x90
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2201      	movs	r2, #1
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fe03 	bl	8002158 <HAL_GPIO_WritePin>
 8000552:	e01f      	b.n	8000594 <main+0x198>
 8000554:	200006c4 	.word	0x200006c4
 8000558:	2000070c 	.word	0x2000070c
 800055c:	200007e4 	.word	0x200007e4
 8000560:	20000684 	.word	0x20000684
 8000564:	20000038 	.word	0x20000038
 8000568:	20000680 	.word	0x20000680
 800056c:	48001400 	.word	0x48001400
        }
        else if (out_time == 80)
 8000570:	4bac      	ldr	r3, [pc, #688]	; (8000824 <main+0x428>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	2b50      	cmp	r3, #80	; 0x50
 8000576:	d10d      	bne.n	8000594 <main+0x198>
        {
          HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8000578:	4bab      	ldr	r3, [pc, #684]	; (8000828 <main+0x42c>)
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fdea 	bl	8002158 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(OUT_LINE_PORT, OUT_LINE_PIN, GPIO_PIN_RESET);
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	0159      	lsls	r1, r3, #5
 8000588:	2390      	movs	r3, #144	; 0x90
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2200      	movs	r2, #0
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fde2 	bl	8002158 <HAL_GPIO_WritePin>
        }
      }

      TIM17_flag = 0;
 8000594:	4ba5      	ldr	r3, [pc, #660]	; (800082c <main+0x430>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

      adc_list_the_po++;
 800059a:	4ba5      	ldr	r3, [pc, #660]	; (8000830 <main+0x434>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4ba3      	ldr	r3, [pc, #652]	; (8000830 <main+0x434>)
 80005a4:	701a      	strb	r2, [r3, #0]
      if (adc_list_the_po >= 80)
 80005a6:	4ba2      	ldr	r3, [pc, #648]	; (8000830 <main+0x434>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b4f      	cmp	r3, #79	; 0x4f
 80005ac:	d902      	bls.n	80005b4 <main+0x1b8>
      {
        adc_list_the_po = 0;
 80005ae:	4ba0      	ldr	r3, [pc, #640]	; (8000830 <main+0x434>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]

      // 打开红外发射io3 为高电平
      // HAL_GPIO_WritePin(OUT_PORT_3, OUT_PIN_3, GPIO_PIN_SET);

      // 读取adc�?????????????
      HAL_ADC_Start(&hadc);
 80005b4:	4b9f      	ldr	r3, [pc, #636]	; (8000834 <main+0x438>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f90e 	bl	80017d8 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc, 100);
 80005bc:	4b9d      	ldr	r3, [pc, #628]	; (8000834 <main+0x438>)
 80005be:	2164      	movs	r1, #100	; 0x64
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f95d 	bl	8001880 <HAL_ADC_PollForConversion>
      adc_list[0][adc_list_the_po] = HAL_ADC_GetValue(&hadc);
 80005c6:	4b9b      	ldr	r3, [pc, #620]	; (8000834 <main+0x438>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 f9f1 	bl	80019b0 <HAL_ADC_GetValue>
 80005ce:	0001      	movs	r1, r0
 80005d0:	4b97      	ldr	r3, [pc, #604]	; (8000830 <main+0x434>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	001a      	movs	r2, r3
 80005d6:	4b98      	ldr	r3, [pc, #608]	; (8000838 <main+0x43c>)
 80005d8:	0092      	lsls	r2, r2, #2
 80005da:	50d1      	str	r1, [r2, r3]
      HAL_ADC_PollForConversion(&hadc, 100);
 80005dc:	4b95      	ldr	r3, [pc, #596]	; (8000834 <main+0x438>)
 80005de:	2164      	movs	r1, #100	; 0x64
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 f94d 	bl	8001880 <HAL_ADC_PollForConversion>
      adc_list[1][adc_list_the_po] = HAL_ADC_GetValue(&hadc);
 80005e6:	4b93      	ldr	r3, [pc, #588]	; (8000834 <main+0x438>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 f9e1 	bl	80019b0 <HAL_ADC_GetValue>
 80005ee:	0001      	movs	r1, r0
 80005f0:	4b8f      	ldr	r3, [pc, #572]	; (8000830 <main+0x434>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	001a      	movs	r2, r3
 80005f6:	4b90      	ldr	r3, [pc, #576]	; (8000838 <main+0x43c>)
 80005f8:	3250      	adds	r2, #80	; 0x50
 80005fa:	0092      	lsls	r2, r2, #2
 80005fc:	50d1      	str	r1, [r2, r3]
      HAL_ADC_PollForConversion(&hadc, 100);
 80005fe:	4b8d      	ldr	r3, [pc, #564]	; (8000834 <main+0x438>)
 8000600:	2164      	movs	r1, #100	; 0x64
 8000602:	0018      	movs	r0, r3
 8000604:	f001 f93c 	bl	8001880 <HAL_ADC_PollForConversion>
      adc_list[2][adc_list_the_po] = HAL_ADC_GetValue(&hadc);
 8000608:	4b8a      	ldr	r3, [pc, #552]	; (8000834 <main+0x438>)
 800060a:	0018      	movs	r0, r3
 800060c:	f001 f9d0 	bl	80019b0 <HAL_ADC_GetValue>
 8000610:	0001      	movs	r1, r0
 8000612:	4b87      	ldr	r3, [pc, #540]	; (8000830 <main+0x434>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	001a      	movs	r2, r3
 8000618:	4b87      	ldr	r3, [pc, #540]	; (8000838 <main+0x43c>)
 800061a:	32a0      	adds	r2, #160	; 0xa0
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	50d1      	str	r1, [r2, r3]
      HAL_ADC_PollForConversion(&hadc, 100);
 8000620:	4b84      	ldr	r3, [pc, #528]	; (8000834 <main+0x438>)
 8000622:	2164      	movs	r1, #100	; 0x64
 8000624:	0018      	movs	r0, r3
 8000626:	f001 f92b 	bl	8001880 <HAL_ADC_PollForConversion>
      adc_list[3][adc_list_the_po] = HAL_ADC_GetValue(&hadc);
 800062a:	4b82      	ldr	r3, [pc, #520]	; (8000834 <main+0x438>)
 800062c:	0018      	movs	r0, r3
 800062e:	f001 f9bf 	bl	80019b0 <HAL_ADC_GetValue>
 8000632:	0001      	movs	r1, r0
 8000634:	4b7e      	ldr	r3, [pc, #504]	; (8000830 <main+0x434>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	001a      	movs	r2, r3
 800063a:	4b7f      	ldr	r3, [pc, #508]	; (8000838 <main+0x43c>)
 800063c:	32f0      	adds	r2, #240	; 0xf0
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	50d1      	str	r1, [r2, r3]
      HAL_ADC_PollForConversion(&hadc, 100);
 8000642:	4b7c      	ldr	r3, [pc, #496]	; (8000834 <main+0x438>)
 8000644:	2164      	movs	r1, #100	; 0x64
 8000646:	0018      	movs	r0, r3
 8000648:	f001 f91a 	bl	8001880 <HAL_ADC_PollForConversion>
      adc_list[4][adc_list_the_po] = HAL_ADC_GetValue(&hadc);
 800064c:	4b79      	ldr	r3, [pc, #484]	; (8000834 <main+0x438>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f9ae 	bl	80019b0 <HAL_ADC_GetValue>
 8000654:	0001      	movs	r1, r0
 8000656:	4b76      	ldr	r3, [pc, #472]	; (8000830 <main+0x434>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	001a      	movs	r2, r3
 800065c:	4b76      	ldr	r3, [pc, #472]	; (8000838 <main+0x43c>)
 800065e:	3241      	adds	r2, #65	; 0x41
 8000660:	32ff      	adds	r2, #255	; 0xff
 8000662:	0092      	lsls	r2, r2, #2
 8000664:	50d1      	str	r1, [r2, r3]

      // 建立�?�?10次的循环,将adc_list中的数据进行累加,是从adc_list_the_po�?始，向后累加
      uint8_t staddpo = 0; // 倒数10位 作为起点
 8000666:	219e      	movs	r1, #158	; 0x9e
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
      int forpo = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	2298      	movs	r2, #152	; 0x98
 8000672:	18ba      	adds	r2, r7, r2
 8000674:	6013      	str	r3, [r2, #0]
      staddpo = adc_list_the_po - 10;
 8000676:	4b6e      	ldr	r3, [pc, #440]	; (8000830 <main+0x434>)
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	187b      	adds	r3, r7, r1
 800067c:	3a0a      	subs	r2, #10
 800067e:	701a      	strb	r2, [r3, #0]
      if (adc_list_the_po < 10)
 8000680:	4b6b      	ldr	r3, [pc, #428]	; (8000830 <main+0x434>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b09      	cmp	r3, #9
 8000686:	d80a      	bhi.n	800069e <main+0x2a2>
      {
        staddpo = 80 - abs(adc_list_the_po - 10);
 8000688:	4b69      	ldr	r3, [pc, #420]	; (8000830 <main+0x434>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	3b0a      	subs	r3, #10
 800068e:	17da      	asrs	r2, r3, #31
 8000690:	189b      	adds	r3, r3, r2
 8000692:	4053      	eors	r3, r2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2150      	movs	r1, #80	; 0x50
 800069a:	1a8a      	subs	r2, r1, r2
 800069c:	701a      	strb	r2, [r3, #0]
      }

      // 累加每次接收到的数据，但只累加10次
      summation[0] = summation[0] + adc_list[0][adc_list_the_po]; // 累加每一�?
 800069e:	2070      	movs	r0, #112	; 0x70
 80006a0:	183b      	adds	r3, r7, r0
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a62      	ldr	r2, [pc, #392]	; (8000830 <main+0x434>)
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	0011      	movs	r1, r2
 80006aa:	4a63      	ldr	r2, [pc, #396]	; (8000838 <main+0x43c>)
 80006ac:	0089      	lsls	r1, r1, #2
 80006ae:	588a      	ldr	r2, [r1, r2]
 80006b0:	189a      	adds	r2, r3, r2
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	601a      	str	r2, [r3, #0]
      summation[0] = summation[0] - adc_list[0][staddpo];         // 减去最早的一位
 80006b6:	183b      	adds	r3, r7, r0
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	259e      	movs	r5, #158	; 0x9e
 80006bc:	197a      	adds	r2, r7, r5
 80006be:	7811      	ldrb	r1, [r2, #0]
 80006c0:	4a5d      	ldr	r2, [pc, #372]	; (8000838 <main+0x43c>)
 80006c2:	0089      	lsls	r1, r1, #2
 80006c4:	588a      	ldr	r2, [r1, r2]
 80006c6:	1a9a      	subs	r2, r3, r2
 80006c8:	183b      	adds	r3, r7, r0
 80006ca:	601a      	str	r2, [r3, #0]

      summation[1] = summation[1] + adc_list[1][adc_list_the_po]; // 累加每一�?·
 80006cc:	183b      	adds	r3, r7, r0
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a57      	ldr	r2, [pc, #348]	; (8000830 <main+0x434>)
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	0011      	movs	r1, r2
 80006d6:	4a58      	ldr	r2, [pc, #352]	; (8000838 <main+0x43c>)
 80006d8:	3150      	adds	r1, #80	; 0x50
 80006da:	0089      	lsls	r1, r1, #2
 80006dc:	588a      	ldr	r2, [r1, r2]
 80006de:	189a      	adds	r2, r3, r2
 80006e0:	183b      	adds	r3, r7, r0
 80006e2:	605a      	str	r2, [r3, #4]
      summation[1] = summation[1] - adc_list[1][staddpo];         // 减去最早的一位
 80006e4:	183b      	adds	r3, r7, r0
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	197a      	adds	r2, r7, r5
 80006ea:	7811      	ldrb	r1, [r2, #0]
 80006ec:	4a52      	ldr	r2, [pc, #328]	; (8000838 <main+0x43c>)
 80006ee:	3150      	adds	r1, #80	; 0x50
 80006f0:	0089      	lsls	r1, r1, #2
 80006f2:	588a      	ldr	r2, [r1, r2]
 80006f4:	1a9a      	subs	r2, r3, r2
 80006f6:	183b      	adds	r3, r7, r0
 80006f8:	605a      	str	r2, [r3, #4]

      summation[2] = summation[2] + adc_list[2][adc_list_the_po]; // 累加每一�?
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4a4c      	ldr	r2, [pc, #304]	; (8000830 <main+0x434>)
 8000700:	7812      	ldrb	r2, [r2, #0]
 8000702:	0011      	movs	r1, r2
 8000704:	4a4c      	ldr	r2, [pc, #304]	; (8000838 <main+0x43c>)
 8000706:	31a0      	adds	r1, #160	; 0xa0
 8000708:	0089      	lsls	r1, r1, #2
 800070a:	588a      	ldr	r2, [r1, r2]
 800070c:	189a      	adds	r2, r3, r2
 800070e:	183b      	adds	r3, r7, r0
 8000710:	609a      	str	r2, [r3, #8]
      summation[2] = summation[2] - adc_list[2][staddpo];         // 减去最早的一位
 8000712:	183b      	adds	r3, r7, r0
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	197a      	adds	r2, r7, r5
 8000718:	7811      	ldrb	r1, [r2, #0]
 800071a:	4a47      	ldr	r2, [pc, #284]	; (8000838 <main+0x43c>)
 800071c:	31a0      	adds	r1, #160	; 0xa0
 800071e:	0089      	lsls	r1, r1, #2
 8000720:	588a      	ldr	r2, [r1, r2]
 8000722:	1a9a      	subs	r2, r3, r2
 8000724:	183b      	adds	r3, r7, r0
 8000726:	609a      	str	r2, [r3, #8]

      summation[3] = summation[3] + adc_list[3][adc_list_the_po]; // 累加每一�?
 8000728:	183b      	adds	r3, r7, r0
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a40      	ldr	r2, [pc, #256]	; (8000830 <main+0x434>)
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	0011      	movs	r1, r2
 8000732:	4a41      	ldr	r2, [pc, #260]	; (8000838 <main+0x43c>)
 8000734:	31f0      	adds	r1, #240	; 0xf0
 8000736:	0089      	lsls	r1, r1, #2
 8000738:	588a      	ldr	r2, [r1, r2]
 800073a:	189a      	adds	r2, r3, r2
 800073c:	183b      	adds	r3, r7, r0
 800073e:	60da      	str	r2, [r3, #12]
      summation[3] = summation[3] - adc_list[3][staddpo];         // 减去最早的一位
 8000740:	183b      	adds	r3, r7, r0
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	197a      	adds	r2, r7, r5
 8000746:	7811      	ldrb	r1, [r2, #0]
 8000748:	4a3b      	ldr	r2, [pc, #236]	; (8000838 <main+0x43c>)
 800074a:	31f0      	adds	r1, #240	; 0xf0
 800074c:	0089      	lsls	r1, r1, #2
 800074e:	588a      	ldr	r2, [r1, r2]
 8000750:	1a9a      	subs	r2, r3, r2
 8000752:	183b      	adds	r3, r7, r0
 8000754:	60da      	str	r2, [r3, #12]

      summation[4] = summation[4] + adc_list[4][adc_list_the_po]; // 累加每一�?
 8000756:	183b      	adds	r3, r7, r0
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	4a35      	ldr	r2, [pc, #212]	; (8000830 <main+0x434>)
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	0011      	movs	r1, r2
 8000760:	4a35      	ldr	r2, [pc, #212]	; (8000838 <main+0x43c>)
 8000762:	3141      	adds	r1, #65	; 0x41
 8000764:	31ff      	adds	r1, #255	; 0xff
 8000766:	0089      	lsls	r1, r1, #2
 8000768:	588a      	ldr	r2, [r1, r2]
 800076a:	189a      	adds	r2, r3, r2
 800076c:	183b      	adds	r3, r7, r0
 800076e:	611a      	str	r2, [r3, #16]
      summation[4] = summation[4] - adc_list[4][staddpo];         // 减去最早的一位
 8000770:	183b      	adds	r3, r7, r0
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	197a      	adds	r2, r7, r5
 8000776:	7811      	ldrb	r1, [r2, #0]
 8000778:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <main+0x43c>)
 800077a:	3141      	adds	r1, #65	; 0x41
 800077c:	31ff      	adds	r1, #255	; 0xff
 800077e:	0089      	lsls	r1, r1, #2
 8000780:	588a      	ldr	r2, [r1, r2]
 8000782:	1a9a      	subs	r2, r3, r2
 8000784:	0004      	movs	r4, r0
 8000786:	193b      	adds	r3, r7, r4
 8000788:	611a      	str	r2, [r3, #16]

      // 求出平均数，作为稳定的基础数
      adc_average[0] = summation[0] / 10; // 求出平均�?
 800078a:	193b      	adds	r3, r7, r4
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	210a      	movs	r1, #10
 8000790:	0018      	movs	r0, r3
 8000792:	f7ff fcb9 	bl	8000108 <__udivsi3>
 8000796:	0003      	movs	r3, r0
 8000798:	001a      	movs	r2, r3
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <main+0x440>)
 800079c:	601a      	str	r2, [r3, #0]
      adc_average[1] = summation[1] / 10; // 求出平均�?
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	210a      	movs	r1, #10
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fcaf 	bl	8000108 <__udivsi3>
 80007aa:	0003      	movs	r3, r0
 80007ac:	001a      	movs	r2, r3
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <main+0x440>)
 80007b0:	605a      	str	r2, [r3, #4]
      adc_average[2] = summation[2] / 10; // 求出平均�?
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	210a      	movs	r1, #10
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fca5 	bl	8000108 <__udivsi3>
 80007be:	0003      	movs	r3, r0
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <main+0x440>)
 80007c4:	609a      	str	r2, [r3, #8]
      adc_average[3] = summation[3] / 10; // 求出平均�?
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	210a      	movs	r1, #10
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff fc9b 	bl	8000108 <__udivsi3>
 80007d2:	0003      	movs	r3, r0
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <main+0x440>)
 80007d8:	60da      	str	r2, [r3, #12]
      adc_average[4] = summation[4] / 10; // 求出平均�?
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	210a      	movs	r1, #10
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff fc91 	bl	8000108 <__udivsi3>
 80007e6:	0003      	movs	r3, r0
 80007e8:	001a      	movs	r2, r3
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <main+0x440>)
 80007ec:	611a      	str	r2, [r3, #16]

      // 这里再后期应该加入根据adc_average的值来修改稳定范围，和波动范围

      forpo = staddpo;
 80007ee:	197b      	adds	r3, r7, r5
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2298      	movs	r2, #152	; 0x98
 80007f4:	18ba      	adds	r2, r7, r2
 80007f6:	6013      	str	r3, [r2, #0]
      steady[0] = 0;
 80007f8:	2160      	movs	r1, #96	; 0x60
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
      steady[1] = 0;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	705a      	strb	r2, [r3, #1]
      steady[2] = 0;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	709a      	strb	r2, [r3, #2]
      steady[3] = 0;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	70da      	strb	r2, [r3, #3]
      steady[4] = 0;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	711a      	strb	r2, [r3, #4]
      for (i = 0; i < 10; i++) // 判读就近10个数据是否稳�?
 8000818:	239f      	movs	r3, #159	; 0x9f
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e0cb      	b.n	80009ba <main+0x5be>
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000680 	.word	0x20000680
 8000828:	48001400 	.word	0x48001400
 800082c:	20000038 	.word	0x20000038
 8000830:	2000067c 	.word	0x2000067c
 8000834:	20000684 	.word	0x20000684
 8000838:	2000003c 	.word	0x2000003c
 800083c:	2000082c 	.word	0x2000082c
      {
        forpo++;
 8000840:	2298      	movs	r2, #152	; 0x98
 8000842:	18bb      	adds	r3, r7, r2
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	18b9      	adds	r1, r7, r2
 800084a:	600b      	str	r3, [r1, #0]
        if (forpo >= 50)
 800084c:	18bb      	adds	r3, r7, r2
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b31      	cmp	r3, #49	; 0x31
 8000852:	dd02      	ble.n	800085a <main+0x45e>
        {
          forpo = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	18ba      	adds	r2, r7, r2
 8000858:	6013      	str	r3, [r2, #0]
        }

        if (adc_list[0][forpo] > adc_average[0] + steady_reange || adc_list[0][forpo] < adc_average[0] - steady_reange)
 800085a:	4b99      	ldr	r3, [pc, #612]	; (8000ac0 <main+0x6c4>)
 800085c:	2098      	movs	r0, #152	; 0x98
 800085e:	183a      	adds	r2, r7, r0
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	58d2      	ldr	r2, [r2, r3]
 8000866:	4b97      	ldr	r3, [pc, #604]	; (8000ac4 <main+0x6c8>)
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	4b97      	ldr	r3, [pc, #604]	; (8000ac8 <main+0x6cc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	18cb      	adds	r3, r1, r3
 8000870:	429a      	cmp	r2, r3
 8000872:	dc0b      	bgt.n	800088c <main+0x490>
 8000874:	4b92      	ldr	r3, [pc, #584]	; (8000ac0 <main+0x6c4>)
 8000876:	183a      	adds	r2, r7, r0
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	58d2      	ldr	r2, [r2, r3]
 800087e:	4b91      	ldr	r3, [pc, #580]	; (8000ac4 <main+0x6c8>)
 8000880:	6819      	ldr	r1, [r3, #0]
 8000882:	4b91      	ldr	r3, [pc, #580]	; (8000ac8 <main+0x6cc>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1acb      	subs	r3, r1, r3
 8000888:	429a      	cmp	r2, r3
 800088a:	da06      	bge.n	800089a <main+0x49e>
        {
          steady[0]++;
 800088c:	2160      	movs	r1, #96	; 0x60
 800088e:	187b      	adds	r3, r7, r1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	187b      	adds	r3, r7, r1
 8000898:	701a      	strb	r2, [r3, #0]
        }
        if (adc_list[1][forpo] > adc_average[1] + steady_reange || adc_list[1][forpo] < adc_average[1] - steady_reange)
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <main+0x6c4>)
 800089c:	2098      	movs	r0, #152	; 0x98
 800089e:	183a      	adds	r2, r7, r0
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	3250      	adds	r2, #80	; 0x50
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	58d2      	ldr	r2, [r2, r3]
 80008a8:	4b86      	ldr	r3, [pc, #536]	; (8000ac4 <main+0x6c8>)
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	4b86      	ldr	r3, [pc, #536]	; (8000ac8 <main+0x6cc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	18cb      	adds	r3, r1, r3
 80008b2:	429a      	cmp	r2, r3
 80008b4:	dc0c      	bgt.n	80008d0 <main+0x4d4>
 80008b6:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <main+0x6c4>)
 80008b8:	183a      	adds	r2, r7, r0
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	3250      	adds	r2, #80	; 0x50
 80008be:	0092      	lsls	r2, r2, #2
 80008c0:	58d2      	ldr	r2, [r2, r3]
 80008c2:	4b80      	ldr	r3, [pc, #512]	; (8000ac4 <main+0x6c8>)
 80008c4:	6859      	ldr	r1, [r3, #4]
 80008c6:	4b80      	ldr	r3, [pc, #512]	; (8000ac8 <main+0x6cc>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1acb      	subs	r3, r1, r3
 80008cc:	429a      	cmp	r2, r3
 80008ce:	da06      	bge.n	80008de <main+0x4e2>
        {
          steady[1]++;
 80008d0:	2160      	movs	r1, #96	; 0x60
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	705a      	strb	r2, [r3, #1]
        }
        if (adc_list[2][forpo] > adc_average[2] + steady_reange || adc_list[2][forpo] < adc_average[2] - steady_reange)
 80008de:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <main+0x6c4>)
 80008e0:	2098      	movs	r0, #152	; 0x98
 80008e2:	183a      	adds	r2, r7, r0
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	32a0      	adds	r2, #160	; 0xa0
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	58d2      	ldr	r2, [r2, r3]
 80008ec:	4b75      	ldr	r3, [pc, #468]	; (8000ac4 <main+0x6c8>)
 80008ee:	6899      	ldr	r1, [r3, #8]
 80008f0:	4b75      	ldr	r3, [pc, #468]	; (8000ac8 <main+0x6cc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	18cb      	adds	r3, r1, r3
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dc0c      	bgt.n	8000914 <main+0x518>
 80008fa:	4b71      	ldr	r3, [pc, #452]	; (8000ac0 <main+0x6c4>)
 80008fc:	183a      	adds	r2, r7, r0
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	32a0      	adds	r2, #160	; 0xa0
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	58d2      	ldr	r2, [r2, r3]
 8000906:	4b6f      	ldr	r3, [pc, #444]	; (8000ac4 <main+0x6c8>)
 8000908:	6899      	ldr	r1, [r3, #8]
 800090a:	4b6f      	ldr	r3, [pc, #444]	; (8000ac8 <main+0x6cc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1acb      	subs	r3, r1, r3
 8000910:	429a      	cmp	r2, r3
 8000912:	da06      	bge.n	8000922 <main+0x526>
        {
          steady[2]++;
 8000914:	2160      	movs	r1, #96	; 0x60
 8000916:	187b      	adds	r3, r7, r1
 8000918:	789b      	ldrb	r3, [r3, #2]
 800091a:	3301      	adds	r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	187b      	adds	r3, r7, r1
 8000920:	709a      	strb	r2, [r3, #2]
        }
        if (adc_list[3][forpo] > adc_average[3] + steady_reange || adc_list[3][forpo] < adc_average[3] - steady_reange)
 8000922:	4b67      	ldr	r3, [pc, #412]	; (8000ac0 <main+0x6c4>)
 8000924:	2098      	movs	r0, #152	; 0x98
 8000926:	183a      	adds	r2, r7, r0
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	32f0      	adds	r2, #240	; 0xf0
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	58d2      	ldr	r2, [r2, r3]
 8000930:	4b64      	ldr	r3, [pc, #400]	; (8000ac4 <main+0x6c8>)
 8000932:	68d9      	ldr	r1, [r3, #12]
 8000934:	4b64      	ldr	r3, [pc, #400]	; (8000ac8 <main+0x6cc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	18cb      	adds	r3, r1, r3
 800093a:	429a      	cmp	r2, r3
 800093c:	dc0c      	bgt.n	8000958 <main+0x55c>
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <main+0x6c4>)
 8000940:	183a      	adds	r2, r7, r0
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	32f0      	adds	r2, #240	; 0xf0
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	58d2      	ldr	r2, [r2, r3]
 800094a:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <main+0x6c8>)
 800094c:	68d9      	ldr	r1, [r3, #12]
 800094e:	4b5e      	ldr	r3, [pc, #376]	; (8000ac8 <main+0x6cc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	1acb      	subs	r3, r1, r3
 8000954:	429a      	cmp	r2, r3
 8000956:	da06      	bge.n	8000966 <main+0x56a>
        {
          steady[3]++;
 8000958:	2160      	movs	r1, #96	; 0x60
 800095a:	187b      	adds	r3, r7, r1
 800095c:	78db      	ldrb	r3, [r3, #3]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	187b      	adds	r3, r7, r1
 8000964:	70da      	strb	r2, [r3, #3]
        }
        if (adc_list[4][forpo] > adc_average[4] + steady_reange || adc_list[4][forpo] < adc_average[4] - steady_reange)
 8000966:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <main+0x6c4>)
 8000968:	2098      	movs	r0, #152	; 0x98
 800096a:	183a      	adds	r2, r7, r0
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	3241      	adds	r2, #65	; 0x41
 8000970:	32ff      	adds	r2, #255	; 0xff
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	58d2      	ldr	r2, [r2, r3]
 8000976:	4b53      	ldr	r3, [pc, #332]	; (8000ac4 <main+0x6c8>)
 8000978:	6919      	ldr	r1, [r3, #16]
 800097a:	4b53      	ldr	r3, [pc, #332]	; (8000ac8 <main+0x6cc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	18cb      	adds	r3, r1, r3
 8000980:	429a      	cmp	r2, r3
 8000982:	dc0d      	bgt.n	80009a0 <main+0x5a4>
 8000984:	4b4e      	ldr	r3, [pc, #312]	; (8000ac0 <main+0x6c4>)
 8000986:	183a      	adds	r2, r7, r0
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	3241      	adds	r2, #65	; 0x41
 800098c:	32ff      	adds	r2, #255	; 0xff
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	58d2      	ldr	r2, [r2, r3]
 8000992:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <main+0x6c8>)
 8000994:	6919      	ldr	r1, [r3, #16]
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <main+0x6cc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1acb      	subs	r3, r1, r3
 800099c:	429a      	cmp	r2, r3
 800099e:	da06      	bge.n	80009ae <main+0x5b2>
        {
          steady[4]++;
 80009a0:	2160      	movs	r1, #96	; 0x60
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	711a      	strb	r2, [r3, #4]
      for (i = 0; i < 10; i++) // 判读就近10个数据是否稳�?
 80009ae:	219f      	movs	r1, #159	; 0x9f
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	3201      	adds	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	239f      	movs	r3, #159	; 0x9f
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b09      	cmp	r3, #9
 80009c2:	d800      	bhi.n	80009c6 <main+0x5ca>
 80009c4:	e73c      	b.n	8000840 <main+0x444>
        }
      }
      uint8_t scan_start_po = staddpo;
 80009c6:	2197      	movs	r1, #151	; 0x97
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	209e      	movs	r0, #158	; 0x9e
 80009cc:	183a      	adds	r2, r7, r0
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	701a      	strb	r2, [r3, #0]
      uint8_t scan_po = 0;
 80009d2:	2388      	movs	r3, #136	; 0x88
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
      uint8_t bx_p = 0;
 80009da:	2387      	movs	r3, #135	; 0x87
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
      uint8_t scan_yes = 0;
 80009e2:	2386      	movs	r3, #134	; 0x86
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]

      if (staddpo == 0)
 80009ea:	183b      	adds	r3, r7, r0
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <main+0x5fc>
      {
        scan_start_po = 79;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	224f      	movs	r2, #79	; 0x4f
 80009f6:	701a      	strb	r2, [r3, #0]
      }
      scan_po = scan_start_po;
 80009f8:	2388      	movs	r3, #136	; 0x88
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	2297      	movs	r2, #151	; 0x97
 80009fe:	18ba      	adds	r2, r7, r2
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
      if (out_time == 0)
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <main+0x6d0>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d000      	beq.n	8000a0e <main+0x612>
 8000a0c:	e581      	b.n	8000512 <main+0x116>
      {
        for (size_t i = 0; i < 5; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2290      	movs	r2, #144	; 0x90
 8000a12:	18ba      	adds	r2, r7, r2
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	e04c      	b.n	8000ab2 <main+0x6b6>
        {
          if (steady[i] == 0)
 8000a18:	2360      	movs	r3, #96	; 0x60
 8000a1a:	18fa      	adds	r2, r7, r3
 8000a1c:	2490      	movs	r4, #144	; 0x90
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d13d      	bne.n	8000aa6 <main+0x6aa>
          { // N个数据中只有3个以下不稳定 就视为稳定，就进行波形检测
            if (adc_list[i][scan_po] > adc_average[i] + wave_range || adc_list[i][scan_po] < adc_average[i] - wave_range)
 8000a2a:	2588      	movs	r5, #136	; 0x88
 8000a2c:	197b      	adds	r3, r7, r5
 8000a2e:	7818      	ldrb	r0, [r3, #0]
 8000a30:	4923      	ldr	r1, [pc, #140]	; (8000ac0 <main+0x6c4>)
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	0013      	movs	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	189b      	adds	r3, r3, r2
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	181b      	adds	r3, r3, r0
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	585a      	ldr	r2, [r3, r1]
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <main+0x6c8>)
 8000a46:	1939      	adds	r1, r7, r4
 8000a48:	6809      	ldr	r1, [r1, #0]
 8000a4a:	0089      	lsls	r1, r1, #2
 8000a4c:	58c9      	ldr	r1, [r1, r3]
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <main+0x6d4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	18cb      	adds	r3, r1, r3
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dc15      	bgt.n	8000a84 <main+0x688>
 8000a58:	197b      	adds	r3, r7, r5
 8000a5a:	7818      	ldrb	r0, [r3, #0]
 8000a5c:	4918      	ldr	r1, [pc, #96]	; (8000ac0 <main+0x6c4>)
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	0013      	movs	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	181b      	adds	r3, r3, r0
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	585a      	ldr	r2, [r3, r1]
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <main+0x6c8>)
 8000a72:	1939      	adds	r1, r7, r4
 8000a74:	6809      	ldr	r1, [r1, #0]
 8000a76:	0089      	lsls	r1, r1, #2
 8000a78:	58c9      	ldr	r1, [r1, r3]
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <main+0x6d4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1acb      	subs	r3, r1, r3
 8000a80:	429a      	cmp	r2, r3
 8000a82:	da10      	bge.n	8000aa6 <main+0x6aa>
            { // 有了波动就对波形进行检测
              if (scan_wave(i, scan_start_po))
 8000a84:	2390      	movs	r3, #144	; 0x90
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	2397      	movs	r3, #151	; 0x97
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f7ff fbc3 	bl	8000220 <scan_wave>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d003      	beq.n	8000aa6 <main+0x6aa>
              { // 返回了被确认的结果
                out_time = 90;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <main+0x6d0>)
 8000aa0:	225a      	movs	r2, #90	; 0x5a
 8000aa2:	801a      	strh	r2, [r3, #0]
                break;
 8000aa4:	e00a      	b.n	8000abc <main+0x6c0>
        for (size_t i = 0; i < 5; i++)
 8000aa6:	2290      	movs	r2, #144	; 0x90
 8000aa8:	18bb      	adds	r3, r7, r2
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	18ba      	adds	r2, r7, r2
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	2390      	movs	r3, #144	; 0x90
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d9ad      	bls.n	8000a18 <main+0x61c>
    if (TIM17_flag == 1)
 8000abc:	e529      	b.n	8000512 <main+0x116>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	2000003c 	.word	0x2000003c
 8000ac4:	2000082c 	.word	0x2000082c
 8000ac8:	2000000c 	.word	0x2000000c
 8000acc:	20000680 	.word	0x20000680
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b091      	sub	sp, #68	; 0x44
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	2410      	movs	r4, #16
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2330      	movs	r3, #48	; 0x30
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f002 fe59 	bl	800379c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aea:	003b      	movs	r3, r7
 8000aec:	0018      	movs	r0, r3
 8000aee:	2310      	movs	r3, #16
 8000af0:	001a      	movs	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f002 fe52 	bl	800379c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14;
 8000af8:	0021      	movs	r1, r4
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2212      	movs	r2, #18
 8000afe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2201      	movs	r2, #1
 8000b04:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2201      	movs	r2, #1
 8000b0a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2210      	movs	r2, #16
 8000b10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2210      	movs	r2, #16
 8000b16:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	0352      	lsls	r2, r2, #13
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 fb2c 	bl	8002194 <HAL_RCC_OscConfig>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000b40:	f000 faac 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2207      	movs	r2, #7
 8000b48:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b56:	003b      	movs	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2101      	movs	r1, #1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 fe35 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b6a:	f000 fa97 	bl	800109c <Error_Handler>
  }
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b011      	add	sp, #68	; 0x44
 8000b74:	bd90      	pop	{r4, r7, pc}
	...

08000b78 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	0018      	movs	r0, r3
 8000b82:	230c      	movs	r3, #12
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f002 fe08 	bl	800379c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc.Instance = ADC1;
 8000b8c:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <MX_ADC_Init+0x114>)
 8000b8e:	4a40      	ldr	r2, [pc, #256]	; (8000c90 <MX_ADC_Init+0x118>)
 8000b90:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b92:	4b3e      	ldr	r3, [pc, #248]	; (8000c8c <MX_ADC_Init+0x114>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b98:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <MX_ADC_Init+0x114>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <MX_ADC_Init+0x114>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ba4:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <MX_ADC_Init+0x114>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bbc:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bca:	22c2      	movs	r2, #194	; 0xc2
 8000bcc:	32ff      	adds	r2, #255	; 0xff
 8000bce:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_ADC_Init+0x114>)
 8000bd8:	2224      	movs	r2, #36	; 0x24
 8000bda:	2100      	movs	r1, #0
 8000bdc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_ADC_Init+0x114>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_ADC_Init+0x114>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fcb6 	bl	8001558 <HAL_ADC_Init>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 fa54 	bl	800109c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	0152      	lsls	r2, r2, #5
 8000c00:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2207      	movs	r2, #7
 8000c06:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c08:	1d3a      	adds	r2, r7, #4
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_ADC_Init+0x114>)
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 feda 	bl	80019c8 <HAL_ADC_ConfigChannel>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000c18:	f000 fa40 	bl	800109c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2201      	movs	r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c22:	1d3a      	adds	r2, r7, #4
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC_Init+0x114>)
 8000c26:	0011      	movs	r1, r2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 fecd 	bl	80019c8 <HAL_ADC_ConfigChannel>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000c32:	f000 fa33 	bl	800109c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2202      	movs	r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c3c:	1d3a      	adds	r2, r7, #4
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_ADC_Init+0x114>)
 8000c40:	0011      	movs	r1, r2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fec0 	bl	80019c8 <HAL_ADC_ConfigChannel>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000c4c:	f000 fa26 	bl	800109c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2203      	movs	r2, #3
 8000c54:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c56:	1d3a      	adds	r2, r7, #4
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_ADC_Init+0x114>)
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 feb3 	bl	80019c8 <HAL_ADC_ConfigChannel>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000c66:	f000 fa19 	bl	800109c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
   */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c70:	1d3a      	adds	r2, r7, #4
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_ADC_Init+0x114>)
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fea6 	bl	80019c8 <HAL_ADC_ConfigChannel>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000c80:	f000 fa0c 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000684 	.word	0x20000684
 8000c90:	40012400 	.word	0x40012400

08000c94 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b092      	sub	sp, #72	; 0x48
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9a:	2340      	movs	r3, #64	; 0x40
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f002 fd79 	bl	800379c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	2324      	movs	r3, #36	; 0x24
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0018      	movs	r0, r3
 8000cb0:	231c      	movs	r3, #28
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f002 fd71 	bl	800379c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f002 fd6a 	bl	800379c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc8:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000cca:	4a3c      	ldr	r2, [pc, #240]	; (8000dbc <MX_TIM1_Init+0x128>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1262;
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000cd0:	4a3b      	ldr	r2, [pc, #236]	; (8000dc0 <MX_TIM1_Init+0x12c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000cdc:	22fa      	movs	r2, #250	; 0xfa
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 ff26 	bl	8002b48 <HAL_TIM_PWM_Init>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000d00:	f000 f9cc 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d12:	187a      	adds	r2, r7, r1
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f002 fc7f 	bl	800361c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d22:	f000 f9bb 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d26:	2124      	movs	r1, #36	; 0x24
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2260      	movs	r2, #96	; 0x60
 8000d2c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	22fa      	movs	r2, #250	; 0xfa
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d54:	1879      	adds	r1, r7, r1
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000d58:	2204      	movs	r2, #4
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f002 f900 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d64:	f000 f99a 	bl	800109c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	0192      	lsls	r2, r2, #6
 8000d8c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d94:	1d3a      	adds	r2, r7, #4
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f002 fc90 	bl	80036c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000da4:	f000 f97a 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <MX_TIM1_Init+0x124>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fa6e 	bl	800128c <HAL_TIM_MspPostInit>
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b012      	add	sp, #72	; 0x48
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200006c4 	.word	0x200006c4
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	000004ee 	.word	0x000004ee

08000dc4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dca:	2320      	movs	r3, #32
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f002 fce1 	bl	800379c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	231c      	movs	r3, #28
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f002 fcda 	bl	800379c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000dea:	4a30      	ldr	r2, [pc, #192]	; (8000eac <MX_TIM3_Init+0xe8>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1262;
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000df0:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <MX_TIM3_Init+0xec>)
 8000df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000dfc:	22fa      	movs	r2, #250	; 0xfa
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 fe99 	bl	8002b48 <HAL_TIM_PWM_Init>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e1a:	f000 f93f 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2120      	movs	r1, #32
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2c:	187a      	adds	r2, r7, r1
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e30:	0011      	movs	r1, r2
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 fbf2 	bl	800361c <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f000 f92e 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2260      	movs	r2, #96	; 0x60
 8000e44:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	22fa      	movs	r2, #250	; 0xfa
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5a:	1d39      	adds	r1, r7, #4
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 f87d 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000e6a:	f000 f917 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6e:	1d39      	adds	r1, r7, #4
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	0018      	movs	r0, r3
 8000e76:	f002 f873 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000e7e:	f000 f90d 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e82:	1d39      	adds	r1, r7, #4
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f002 f869 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000e92:	f000 f903 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <MX_TIM3_Init+0xe4>)
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 f9f7 	bl	800128c <HAL_TIM_MspPostInit>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b00a      	add	sp, #40	; 0x28
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	2000070c 	.word	0x2000070c
 8000eac:	40000400 	.word	0x40000400
 8000eb0:	000004ee 	.word	0x000004ee

08000eb4 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_TIM14_Init+0x40>)
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <MX_TIM14_Init+0x44>)
 8000ebc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_TIM14_Init+0x40>)
 8000ec0:	223f      	movs	r2, #63	; 0x3f
 8000ec2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_TIM14_Init+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10;
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_TIM14_Init+0x40>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_TIM14_Init+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_TIM14_Init+0x40>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <MX_TIM14_Init+0x40>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 fd9c 	bl	8002a1c <HAL_TIM_Base_Init>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000ee8:	f000 f8d8 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000754 	.word	0x20000754
 8000ef8:	40002000 	.word	0x40002000

08000efc <MX_TIM16_Init>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <MX_TIM16_Init+0x48>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f08:	223f      	movs	r2, #63	; 0x3f
 8000f0a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <MX_TIM16_Init+0x44>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 fd75 	bl	8002a1c <HAL_TIM_Base_Init>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000f36:	f000 f8b1 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000079c 	.word	0x2000079c
 8000f44:	40014400 	.word	0x40014400

08000f48 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <MX_TIM17_Init+0x48>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 47;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f54:	222f      	movs	r2, #47	; 0x2f
 8000f56:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <MX_TIM17_Init+0x4c>)
 8000f62:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <MX_TIM17_Init+0x44>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 fd4f 	bl	8002a1c <HAL_TIM_Base_Init>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000f82:	f000 f88b 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200007e4 	.word	0x200007e4
 8000f90:	40014800 	.word	0x40014800
 8000f94:	0000270f 	.word	0x0000270f

08000f98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	240c      	movs	r4, #12
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	2314      	movs	r3, #20
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f002 fbf7 	bl	800379c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b39      	ldr	r3, [pc, #228]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	03c9      	lsls	r1, r1, #15
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	615a      	str	r2, [r3, #20]
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fbe:	695a      	ldr	r2, [r3, #20]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	03db      	lsls	r3, r3, #15
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	0289      	lsls	r1, r1, #10
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fda:	695a      	ldr	r2, [r3, #20]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	029b      	lsls	r3, r3, #10
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	02c9      	lsls	r1, r1, #11
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	615a      	str	r2, [r3, #20]
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <MX_GPIO_Init+0xfc>)
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	02db      	lsls	r3, r3, #11
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <MX_GPIO_Init+0x100>)
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	0018      	movs	r0, r3
 800100a:	f001 f8a5 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_10, GPIO_PIN_RESET);
 800100e:	2384      	movs	r3, #132	; 0x84
 8001010:	00d9      	lsls	r1, r3, #3
 8001012:	2390      	movs	r3, #144	; 0x90
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	2200      	movs	r2, #0
 8001018:	0018      	movs	r0, r3
 800101a:	f001 f89d 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101e:	193b      	adds	r3, r7, r4
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	193b      	adds	r3, r7, r4
 8001026:	2201      	movs	r2, #1
 8001028:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001036:	193b      	adds	r3, r7, r4
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_GPIO_Init+0x100>)
 800103a:	0019      	movs	r1, r3
 800103c:	0010      	movs	r0, r2
 800103e:	f000 ff1b 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2202      	movs	r2, #2
 8001046:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001054:	193b      	adds	r3, r7, r4
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <MX_GPIO_Init+0x100>)
 8001058:	0019      	movs	r1, r3
 800105a:	0010      	movs	r0, r2
 800105c:	f000 ff0c 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_10;
 8001060:	0021      	movs	r1, r4
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2284      	movs	r2, #132	; 0x84
 8001066:	00d2      	lsls	r2, r2, #3
 8001068:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2201      	movs	r2, #1
 800106e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	187a      	adds	r2, r7, r1
 800107e:	2390      	movs	r3, #144	; 0x90
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fef7 	bl	8001e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b009      	add	sp, #36	; 0x24
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	40021000 	.word	0x40021000
 8001098:	48001400 	.word	0x48001400

0800109c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_MspInit+0x44>)
 80010b0:	699a      	ldr	r2, [r3, #24]
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_MspInit+0x44>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	619a      	str	r2, [r3, #24]
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_MspInit+0x44>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2201      	movs	r2, #1
 80010c0:	4013      	ands	r3, r2
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x44>)
 80010c8:	69da      	ldr	r2, [r3, #28]
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_MspInit+0x44>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0549      	lsls	r1, r1, #21
 80010d0:	430a      	orrs	r2, r1
 80010d2:	61da      	str	r2, [r3, #28]
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_MspInit+0x44>)
 80010d6:	69da      	ldr	r2, [r3, #28]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	055b      	lsls	r3, r3, #21
 80010dc:	4013      	ands	r3, r2
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b08b      	sub	sp, #44	; 0x2c
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	2414      	movs	r4, #20
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	0018      	movs	r0, r3
 80010fe:	2314      	movs	r3, #20
 8001100:	001a      	movs	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	f002 fb4a 	bl	800379c <memset>
  if(hadc->Instance==ADC1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0x84>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12b      	bne.n	800116a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_ADC_MspInit+0x88>)
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_ADC_MspInit+0x88>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0089      	lsls	r1, r1, #2
 800111c:	430a      	orrs	r2, r1
 800111e:	619a      	str	r2, [r3, #24]
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_ADC_MspInit+0x88>)
 8001122:	699a      	ldr	r2, [r3, #24]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_ADC_MspInit+0x88>)
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_ADC_MspInit+0x88>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0289      	lsls	r1, r1, #10
 8001138:	430a      	orrs	r2, r1
 800113a:	615a      	str	r2, [r3, #20]
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_ADC_MspInit+0x88>)
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800114a:	193b      	adds	r3, r7, r4
 800114c:	221f      	movs	r2, #31
 800114e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	2203      	movs	r2, #3
 8001154:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	193b      	adds	r3, r7, r4
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	193a      	adds	r2, r7, r4
 800115e:	2390      	movs	r3, #144	; 0x90
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	0011      	movs	r1, r2
 8001164:	0018      	movs	r0, r3
 8001166:	f000 fe87 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b00b      	add	sp, #44	; 0x2c
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40012400 	.word	0x40012400
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_TIM_PWM_MspInit+0x5c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d10e      	bne.n	80011ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_TIM_PWM_MspInit+0x60>)
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_TIM_PWM_MspInit+0x60>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	0109      	lsls	r1, r1, #4
 8001198:	430a      	orrs	r2, r1
 800119a:	619a      	str	r2, [r3, #24]
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_TIM_PWM_MspInit+0x60>)
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011aa:	e010      	b.n	80011ce <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_TIM_PWM_MspInit+0x64>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10b      	bne.n	80011ce <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_TIM_PWM_MspInit+0x60>)
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_TIM_PWM_MspInit+0x60>)
 80011bc:	2102      	movs	r1, #2
 80011be:	430a      	orrs	r2, r1
 80011c0:	61da      	str	r2, [r3, #28]
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_TIM_PWM_MspInit+0x60>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	40012c00 	.word	0x40012c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40000400 	.word	0x40000400

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_TIM_Base_MspInit+0x98>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10e      	bne.n	8001214 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 80011f8:	69da      	ldr	r2, [r3, #28]
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	0049      	lsls	r1, r1, #1
 8001200:	430a      	orrs	r2, r1
 8001202:	61da      	str	r2, [r3, #28]
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 8001206:	69da      	ldr	r2, [r3, #28]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4013      	ands	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001212:	e02e      	b.n	8001272 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM16)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_TIM_Base_MspInit+0xa0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10e      	bne.n	800123c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0289      	lsls	r1, r1, #10
 8001228:	430a      	orrs	r2, r1
 800122a:	619a      	str	r2, [r3, #24]
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	029b      	lsls	r3, r3, #10
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
}
 800123a:	e01a      	b.n	8001272 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM17)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_TIM_Base_MspInit+0xa4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d115      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	02c9      	lsls	r1, r1, #11
 8001250:	430a      	orrs	r2, r1
 8001252:	619a      	str	r2, [r3, #24]
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_TIM_Base_MspInit+0x9c>)
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	02db      	lsls	r3, r3, #11
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2016      	movs	r0, #22
 8001268:	f000 fdd4 	bl	8001e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800126c:	2016      	movs	r0, #22
 800126e:	f000 fde6 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b006      	add	sp, #24
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40002000 	.word	0x40002000
 8001280:	40021000 	.word	0x40021000
 8001284:	40014400 	.word	0x40014400
 8001288:	40014800 	.word	0x40014800

0800128c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b08b      	sub	sp, #44	; 0x2c
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	2414      	movs	r4, #20
 8001296:	193b      	adds	r3, r7, r4
 8001298:	0018      	movs	r0, r3
 800129a:	2314      	movs	r3, #20
 800129c:	001a      	movs	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	f002 fa7c 	bl	800379c <memset>
  if(htim->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a3d      	ldr	r2, [pc, #244]	; (80013a0 <HAL_TIM_MspPostInit+0x114>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d126      	bne.n	80012fc <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	0289      	lsls	r1, r1, #10
 80012b8:	430a      	orrs	r2, r1
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	029b      	lsls	r3, r3, #10
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	0021      	movs	r1, r4
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2202      	movs	r2, #2
 80012d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2202      	movs	r2, #2
 80012ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	187a      	adds	r2, r7, r1
 80012ee:	2390      	movs	r3, #144	; 0x90
 80012f0:	05db      	lsls	r3, r3, #23
 80012f2:	0011      	movs	r1, r2
 80012f4:	0018      	movs	r0, r3
 80012f6:	f000 fdbf 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012fa:	e04d      	b.n	8001398 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_TIM_MspPostInit+0x11c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d148      	bne.n	8001398 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0289      	lsls	r1, r1, #10
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	4013      	ands	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	02c9      	lsls	r1, r1, #11
 800132c:	430a      	orrs	r2, r1
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_TIM_MspPostInit+0x118>)
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	02db      	lsls	r3, r3, #11
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800133e:	2414      	movs	r4, #20
 8001340:	193b      	adds	r3, r7, r4
 8001342:	22c0      	movs	r2, #192	; 0xc0
 8001344:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	193b      	adds	r3, r7, r4
 8001348:	2202      	movs	r2, #2
 800134a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	193b      	adds	r3, r7, r4
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	193b      	adds	r3, r7, r4
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001358:	193b      	adds	r3, r7, r4
 800135a:	2201      	movs	r2, #1
 800135c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	193a      	adds	r2, r7, r4
 8001360:	2390      	movs	r3, #144	; 0x90
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f000 fd86 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800136c:	0021      	movs	r1, r4
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2202      	movs	r2, #2
 8001372:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2202      	movs	r2, #2
 8001378:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2201      	movs	r2, #1
 800138a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	187b      	adds	r3, r7, r1
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_TIM_MspPostInit+0x120>)
 8001390:	0019      	movs	r1, r3
 8001392:	0010      	movs	r0, r2
 8001394:	f000 fd70 	bl	8001e78 <HAL_GPIO_Init>
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b00b      	add	sp, #44	; 0x2c
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	40012c00 	.word	0x40012c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40000400 	.word	0x40000400
 80013ac:	48000400 	.word	0x48000400

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f8a4 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <TIM17_IRQHandler+0x18>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f001 fca4 	bl	8002d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  TIM17_flag=1;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <TIM17_IRQHandler+0x1c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM17_IRQn 1 */
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200007e4 	.word	0x200007e4
 80013fc:	20000038 	.word	0x20000038

08001400 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 800140c:	4813      	ldr	r0, [pc, #76]	; (800145c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800140e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001410:	f7ff fff6 	bl	8001400 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001414:	4812      	ldr	r0, [pc, #72]	; (8001460 <LoopForever+0x6>)
    LDR R1, [R0]
 8001416:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001418:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <LoopForever+0xa>)
    CMP R1, R2
 800141c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800141e:	d105      	bne.n	800142c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001422:	4912      	ldr	r1, [pc, #72]	; (800146c <LoopForever+0x12>)
    STR R1, [R0]
 8001424:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001426:	4812      	ldr	r0, [pc, #72]	; (8001470 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001428:	4912      	ldr	r1, [pc, #72]	; (8001474 <LoopForever+0x1a>)
    STR R1, [R0]
 800142a:	6001      	str	r1, [r0, #0]

0800142c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	4812      	ldr	r0, [pc, #72]	; (8001478 <LoopForever+0x1e>)
  ldr r1, =_edata
 800142e:	4913      	ldr	r1, [pc, #76]	; (800147c <LoopForever+0x22>)
  ldr r2, =_sidata
 8001430:	4a13      	ldr	r2, [pc, #76]	; (8001480 <LoopForever+0x26>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001444:	4c10      	ldr	r4, [pc, #64]	; (8001488 <LoopForever+0x2e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001452:	f002 f9ab 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001456:	f7fe ffd1 	bl	80003fc <main>

0800145a <LoopForever>:

LoopForever:
    b LoopForever
 800145a:	e7fe      	b.n	800145a <LoopForever>
ldr   r0, =_estack
 800145c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001460:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001464:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001468:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800146c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001470:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001474:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001480:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 8001484:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001488:	20000844 	.word	0x20000844

0800148c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_IRQHandler>
	...

08001490 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_Init+0x24>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_Init+0x24>)
 800149a:	2110      	movs	r1, #16
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f809 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a6:	f7ff fdff 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_InitTick+0x5c>)
 80014c2:	681c      	ldr	r4, [r3, #0]
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_InitTick+0x60>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	0019      	movs	r1, r3
 80014ca:	23fa      	movs	r3, #250	; 0xfa
 80014cc:	0098      	lsls	r0, r3, #2
 80014ce:	f7fe fe1b 	bl	8000108 <__udivsi3>
 80014d2:	0003      	movs	r3, r0
 80014d4:	0019      	movs	r1, r3
 80014d6:	0020      	movs	r0, r4
 80014d8:	f7fe fe16 	bl	8000108 <__udivsi3>
 80014dc:	0003      	movs	r3, r0
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 fcbd 	bl	8001e5e <HAL_SYSTICK_Config>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e00f      	b.n	800150c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d80b      	bhi.n	800150a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	2301      	movs	r3, #1
 80014f6:	425b      	negs	r3, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 fc8a 	bl	8001e14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_InitTick+0x64>)
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b003      	add	sp, #12
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	20000010 	.word	0x20000010
 8001518:	20000018 	.word	0x20000018
 800151c:	20000014 	.word	0x20000014

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x1c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	001a      	movs	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	18d2      	adds	r2, r2, r3
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_IncTick+0x20>)
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	20000018 	.word	0x20000018
 8001540:	20000840 	.word	0x20000840

08001544 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <HAL_GetTick+0x10>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	20000840 	.word	0x20000840

08001558 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e125      	b.n	80017c2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10a      	bne.n	8001594 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2234      	movs	r2, #52	; 0x34
 8001588:	2100      	movs	r1, #0
 800158a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff fdae 	bl	80010f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001598:	2210      	movs	r2, #16
 800159a:	4013      	ands	r3, r2
 800159c:	d000      	beq.n	80015a0 <HAL_ADC_Init+0x48>
 800159e:	e103      	b.n	80017a8 <HAL_ADC_Init+0x250>
 80015a0:	230f      	movs	r3, #15
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d000      	beq.n	80015ac <HAL_ADC_Init+0x54>
 80015aa:	e0fd      	b.n	80017a8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80015b6:	d000      	beq.n	80015ba <HAL_ADC_Init+0x62>
 80015b8:	e0f6      	b.n	80017a8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	4a83      	ldr	r2, [pc, #524]	; (80017cc <HAL_ADC_Init+0x274>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	2202      	movs	r2, #2
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d112      	bne.n	80015fe <HAL_ADC_Init+0xa6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d009      	beq.n	80015fa <HAL_ADC_Init+0xa2>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	401a      	ands	r2, r3
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Init+0xa6>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_ADC_Init+0xa8>
 80015fe:	2300      	movs	r3, #0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d116      	bne.n	8001632 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2218      	movs	r2, #24
 800160c:	4393      	bics	r3, r2
 800160e:	0019      	movs	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	0899      	lsrs	r1, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4964      	ldr	r1, [pc, #400]	; (80017d0 <HAL_ADC_Init+0x278>)
 800163e:	400a      	ands	r2, r1
 8001640:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e1b      	ldrb	r3, [r3, #24]
 8001646:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7e5b      	ldrb	r3, [r3, #25]
 800164c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800164e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e9b      	ldrb	r3, [r3, #26]
 8001654:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001656:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	2b01      	cmp	r3, #1
 800165e:	d002      	beq.n	8001666 <HAL_ADC_Init+0x10e>
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	e000      	b.n	8001668 <HAL_ADC_Init+0x110>
 8001666:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001668:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800166e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d101      	bne.n	800167c <HAL_ADC_Init+0x124>
 8001678:	2304      	movs	r3, #4
 800167a:	e000      	b.n	800167e <HAL_ADC_Init+0x126>
 800167c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800167e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2124      	movs	r1, #36	; 0x24
 8001684:	5c5b      	ldrb	r3, [r3, r1]
 8001686:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001688:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4313      	orrs	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7edb      	ldrb	r3, [r3, #27]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d115      	bne.n	80016c4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e9b      	ldrb	r3, [r3, #26]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0252      	lsls	r2, r2, #9
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	e00b      	b.n	80016c4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b0:	2220      	movs	r2, #32
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	2201      	movs	r2, #1
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	23c2      	movs	r3, #194	; 0xc2
 80016ca:	33ff      	adds	r3, #255	; 0xff
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d007      	beq.n	80016e0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80016d8:	4313      	orrs	r3, r2
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	055b      	lsls	r3, r3, #21
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d01b      	beq.n	8001734 <HAL_ADC_Init+0x1dc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b01      	cmp	r3, #1
 8001702:	d017      	beq.n	8001734 <HAL_ADC_Init+0x1dc>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	2b02      	cmp	r3, #2
 800170a:	d013      	beq.n	8001734 <HAL_ADC_Init+0x1dc>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	2b03      	cmp	r3, #3
 8001712:	d00f      	beq.n	8001734 <HAL_ADC_Init+0x1dc>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	2b04      	cmp	r3, #4
 800171a:	d00b      	beq.n	8001734 <HAL_ADC_Init+0x1dc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	2b05      	cmp	r3, #5
 8001722:	d007      	beq.n	8001734 <HAL_ADC_Init+0x1dc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	2b06      	cmp	r3, #6
 800172a:	d003      	beq.n	8001734 <HAL_ADC_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	2b07      	cmp	r3, #7
 8001732:	d112      	bne.n	800175a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2107      	movs	r1, #7
 8001740:	438a      	bics	r2, r1
 8001742:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6959      	ldr	r1, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	2207      	movs	r2, #7
 8001750:	401a      	ands	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_ADC_Init+0x27c>)
 8001762:	4013      	ands	r3, r2
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	d10b      	bne.n	8001782 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	2203      	movs	r2, #3
 8001776:	4393      	bics	r3, r2
 8001778:	2201      	movs	r2, #1
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001780:	e01c      	b.n	80017bc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	2212      	movs	r2, #18
 8001788:	4393      	bics	r3, r2
 800178a:	2210      	movs	r2, #16
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	2201      	movs	r2, #1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800179e:	230f      	movs	r3, #15
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80017a6:	e009      	b.n	80017bc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ac:	2210      	movs	r2, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80017b4:	230f      	movs	r3, #15
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017bc:	230f      	movs	r3, #15
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b004      	add	sp, #16
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	fffffefd 	.word	0xfffffefd
 80017d0:	fffe0219 	.word	0xfffe0219
 80017d4:	833fffe7 	.word	0x833fffe7

080017d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e0:	230f      	movs	r3, #15
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d138      	bne.n	8001866 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2234      	movs	r2, #52	; 0x34
 80017f8:	5c9b      	ldrb	r3, [r3, r2]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Start+0x2a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e038      	b.n	8001874 <HAL_ADC_Start+0x9c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2234      	movs	r2, #52	; 0x34
 8001806:	2101      	movs	r1, #1
 8001808:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7e5b      	ldrb	r3, [r3, #25]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d007      	beq.n	8001822 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001812:	230f      	movs	r3, #15
 8001814:	18fc      	adds	r4, r7, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	0018      	movs	r0, r3
 800181a:	f000 f9cb 	bl	8001bb4 <ADC_Enable>
 800181e:	0003      	movs	r3, r0
 8001820:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d120      	bne.n	800186e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_ADC_Start+0xa4>)
 8001832:	4013      	ands	r3, r2
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	0052      	lsls	r2, r2, #1
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2234      	movs	r2, #52	; 0x34
 8001848:	2100      	movs	r1, #0
 800184a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	221c      	movs	r2, #28
 8001852:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2104      	movs	r1, #4
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	e003      	b.n	800186e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001866:	230f      	movs	r3, #15
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	2202      	movs	r2, #2
 800186c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800186e:	230f      	movs	r3, #15
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	781b      	ldrb	r3, [r3, #0]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b005      	add	sp, #20
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	fffff0fe 	.word	0xfffff0fe

08001880 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b08      	cmp	r3, #8
 8001890:	d102      	bne.n	8001898 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001892:	2308      	movs	r3, #8
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e014      	b.n	80018c2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10b      	bne.n	80018be <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	2220      	movs	r2, #32
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2234      	movs	r2, #52	; 0x34
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e071      	b.n	80019a2 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80018be:	230c      	movs	r3, #12
 80018c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80018c2:	f7ff fe3f 	bl	8001544 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018ca:	e01f      	b.n	800190c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	d01c      	beq.n	800190c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_ADC_PollForConversion+0x68>
 80018d8:	f7ff fe34 	bl	8001544 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d211      	bcs.n	800190c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	d10b      	bne.n	800190c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	2204      	movs	r2, #4
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2234      	movs	r2, #52	; 0x34
 8001904:	2100      	movs	r1, #0
 8001906:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e04a      	b.n	80019a2 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	d0d9      	beq.n	80018cc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	23c0      	movs	r3, #192	; 0xc0
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	4013      	ands	r3, r2
 8001932:	d12d      	bne.n	8001990 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001938:	2b00      	cmp	r3, #0
 800193a:	d129      	bne.n	8001990 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2208      	movs	r2, #8
 8001944:	4013      	ands	r3, r2
 8001946:	2b08      	cmp	r3, #8
 8001948:	d122      	bne.n	8001990 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2204      	movs	r2, #4
 8001952:	4013      	ands	r3, r2
 8001954:	d110      	bne.n	8001978 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	210c      	movs	r1, #12
 8001962:	438a      	bics	r2, r1
 8001964:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_ADC_PollForConversion+0x12c>)
 800196c:	4013      	ands	r3, r2
 800196e:	2201      	movs	r2, #1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
 8001976:	e00b      	b.n	8001990 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197c:	2220      	movs	r2, #32
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	2201      	movs	r2, #1
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e1b      	ldrb	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d103      	bne.n	80019a0 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	220c      	movs	r2, #12
 800199e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b004      	add	sp, #16
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	fffffefe 	.word	0xfffffefe

080019b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d2:	230f      	movs	r3, #15
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d011      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x46>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d00d      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x46>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d009      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x46>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d005      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x46>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d001      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x46>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2234      	movs	r2, #52	; 0x34
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x54>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e0bb      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1cc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2234      	movs	r2, #52	; 0x34
 8001a20:	2101      	movs	r1, #1
 8001a22:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d000      	beq.n	8001a32 <HAL_ADC_ConfigChannel+0x6a>
 8001a30:	e09f      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <HAL_ADC_ConfigChannel+0x1d4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x76>
 8001a3c:	e077      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	055b      	lsls	r3, r3, #21
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d037      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d033      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d02f      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d02b      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d027      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d023      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2b06      	cmp	r3, #6
 8001a8e:	d01f      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	2b07      	cmp	r3, #7
 8001a96:	d01b      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2107      	movs	r1, #7
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d012      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2107      	movs	r1, #7
 8001ab6:	438a      	bics	r2, r1
 8001ab8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6959      	ldr	r1, [r3, #20]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d003      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0x118>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	d152      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d102      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x12a>
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	e001      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x12e>
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	03db      	lsls	r3, r3, #15
 8001af6:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b10      	cmp	r3, #16
 8001b02:	d140      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_ADC_ConfigChannel+0x1dc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4927      	ldr	r1, [pc, #156]	; (8001ba8 <HAL_ADC_ConfigChannel+0x1e0>)
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7fe fafc 	bl	8000108 <__udivsi3>
 8001b10:	0003      	movs	r3, r0
 8001b12:	001a      	movs	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	189b      	adds	r3, r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b1e:	e002      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x158>
 8001b2c:	e02b      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4099      	lsls	r1, r3
 8001b3c:	000b      	movs	r3, r1
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	400a      	ands	r2, r1
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d003      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x190>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b11      	cmp	r3, #17
 8001b56:	d116      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1a0>
 8001b64:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_ADC_ConfigChannel+0x1e4>)
 8001b66:	e000      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x1a2>
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e009      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	2220      	movs	r2, #32
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001b7e:	230f      	movs	r3, #15
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2234      	movs	r2, #52	; 0x34
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b8e:	230f      	movs	r3, #15
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	781b      	ldrb	r3, [r3, #0]
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	00001001 	.word	0x00001001
 8001ba0:	40012708 	.word	0x40012708
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	000f4240 	.word	0x000f4240
 8001bac:	ff7fffff 	.word	0xff7fffff
 8001bb0:	ffbfffff 	.word	0xffbfffff

08001bb4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d112      	bne.n	8001bf8 <ADC_Enable+0x44>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d009      	beq.n	8001bf4 <ADC_Enable+0x40>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	401a      	ands	r2, r3
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d101      	bne.n	8001bf8 <ADC_Enable+0x44>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <ADC_Enable+0x46>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d152      	bne.n	8001ca4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <ADC_Enable+0xfc>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	d00d      	beq.n	8001c26 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	2210      	movs	r2, #16
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e03f      	b.n	8001ca6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <ADC_Enable+0x100>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	491f      	ldr	r1, [pc, #124]	; (8001cb8 <ADC_Enable+0x104>)
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7fe fa63 	bl	8000108 <__udivsi3>
 8001c42:	0003      	movs	r3, r0
 8001c44:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c46:	e002      	b.n	8001c4e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f9      	bne.n	8001c48 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c54:	f7ff fc76 	bl	8001544 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c5c:	e01b      	b.n	8001c96 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c5e:	f7ff fc71 	bl	8001544 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d914      	bls.n	8001c96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d00d      	beq.n	8001c96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	2210      	movs	r2, #16
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e007      	b.n	8001ca6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d1dc      	bne.n	8001c5e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	80000017 	.word	0x80000017
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	000f4240 	.word	0x000f4240

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8001cce:	d809      	bhi.n	8001ce4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	001a      	movs	r2, r3
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	401a      	ands	r2, r3
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_EnableIRQ+0x30>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4091      	lsls	r1, r2
 8001ce0:	000a      	movs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
  }
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b7f      	cmp	r3, #127	; 0x7f
 8001d04:	d828      	bhi.n	8001d58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d06:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <__NVIC_SetPriority+0xd4>)
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	33c0      	adds	r3, #192	; 0xc0
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	589b      	ldr	r3, [r3, r2]
 8001d16:	1dfa      	adds	r2, r7, #7
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	400a      	ands	r2, r1
 8001d20:	00d2      	lsls	r2, r2, #3
 8001d22:	21ff      	movs	r1, #255	; 0xff
 8001d24:	4091      	lsls	r1, r2
 8001d26:	000a      	movs	r2, r1
 8001d28:	43d2      	mvns	r2, r2
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	22ff      	movs	r2, #255	; 0xff
 8001d34:	401a      	ands	r2, r3
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	4003      	ands	r3, r0
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d44:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <__NVIC_SetPriority+0xd4>)
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	33c0      	adds	r3, #192	; 0xc0
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d56:	e031      	b.n	8001dbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <__NVIC_SetPriority+0xd8>)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	0019      	movs	r1, r3
 8001d60:	230f      	movs	r3, #15
 8001d62:	400b      	ands	r3, r1
 8001d64:	3b08      	subs	r3, #8
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3306      	adds	r3, #6
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	18d3      	adds	r3, r2, r3
 8001d6e:	3304      	adds	r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1dfa      	adds	r2, r7, #7
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	0011      	movs	r1, r2
 8001d78:	2203      	movs	r2, #3
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	21ff      	movs	r1, #255	; 0xff
 8001d80:	4091      	lsls	r1, r2
 8001d82:	000a      	movs	r2, r1
 8001d84:	43d2      	mvns	r2, r2
 8001d86:	401a      	ands	r2, r3
 8001d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	22ff      	movs	r2, #255	; 0xff
 8001d90:	401a      	ands	r2, r3
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	0018      	movs	r0, r3
 8001d98:	2303      	movs	r3, #3
 8001d9a:	4003      	ands	r3, r0
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <__NVIC_SetPriority+0xd8>)
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	001c      	movs	r4, r3
 8001da8:	230f      	movs	r3, #15
 8001daa:	4023      	ands	r3, r4
 8001dac:	3b08      	subs	r3, #8
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	430a      	orrs	r2, r1
 8001db2:	3306      	adds	r3, #6
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	18c3      	adds	r3, r0, r3
 8001db8:	3304      	adds	r3, #4
 8001dba:	601a      	str	r2, [r3, #0]
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b003      	add	sp, #12
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1e5a      	subs	r2, r3, #1
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	045b      	lsls	r3, r3, #17
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d301      	bcc.n	8001de4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de0:	2301      	movs	r3, #1
 8001de2:	e010      	b.n	8001e06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <SysTick_Config+0x44>)
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	3a01      	subs	r2, #1
 8001dea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dec:	2301      	movs	r3, #1
 8001dee:	425b      	negs	r3, r3
 8001df0:	2103      	movs	r1, #3
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff ff7c 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x44>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x44>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	210f      	movs	r1, #15
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	1c02      	adds	r2, r0, #0
 8001e24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b004      	add	sp, #16
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	0002      	movs	r2, r0
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ff33 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff ffaf 	bl	8001dcc <SysTick_Config>
 8001e6e:	0003      	movs	r3, r0
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b002      	add	sp, #8
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e14f      	b.n	8002128 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4091      	lsls	r1, r2
 8001e92:	000a      	movs	r2, r1
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d100      	bne.n	8001ea0 <HAL_GPIO_Init+0x28>
 8001e9e:	e140      	b.n	8002122 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	0013      	movs	r3, r2
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	2201      	movs	r2, #1
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	43da      	mvns	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	58d3      	ldr	r3, [r2, r3]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2207      	movs	r2, #7
 8001f74:	4013      	ands	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2107      	movs	r1, #7
 8001f8e:	400b      	ands	r3, r1
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	6939      	ldr	r1, [r7, #16]
 8001fa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	0013      	movs	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d100      	bne.n	8001fec <HAL_GPIO_Init+0x174>
 8001fea:	e09a      	b.n	8002122 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fec:	4b54      	ldr	r3, [pc, #336]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	619a      	str	r2, [r3, #24]
 8001ff8:	4b51      	ldr	r3, [pc, #324]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002004:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	589b      	ldr	r3, [r3, r2]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2203      	movs	r2, #3
 8002016:	4013      	ands	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	409a      	lsls	r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	43da      	mvns	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	2390      	movs	r3, #144	; 0x90
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	429a      	cmp	r2, r3
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x1e2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a44      	ldr	r2, [pc, #272]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x1de>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a43      	ldr	r2, [pc, #268]	; (800214c <HAL_GPIO_Init+0x2d4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x1da>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a42      	ldr	r2, [pc, #264]	; (8002150 <HAL_GPIO_Init+0x2d8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x1d6>
 800204a:	2303      	movs	r3, #3
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x1e4>
 800204e:	2305      	movs	r3, #5
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x1e4>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x1e4>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x1e4>
 800205a:	2300      	movs	r3, #0
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	2103      	movs	r1, #3
 8002060:	400a      	ands	r2, r1
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43da      	mvns	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	035b      	lsls	r3, r3, #13
 8002092:	4013      	ands	r3, r2
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	039b      	lsls	r3, r3, #14
 80020bc:	4013      	ands	r3, r2
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80020ce:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43da      	mvns	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	029b      	lsls	r3, r3, #10
 80020e6:	4013      	ands	r3, r2
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43da      	mvns	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	025b      	lsls	r3, r3, #9
 8002110:	4013      	ands	r3, r2
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800211c:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	40da      	lsrs	r2, r3
 8002130:	1e13      	subs	r3, r2, #0
 8002132:	d000      	beq.n	8002136 <HAL_GPIO_Init+0x2be>
 8002134:	e6a8      	b.n	8001e88 <HAL_GPIO_Init+0x10>
  } 
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b006      	add	sp, #24
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	48000400 	.word	0x48000400
 800214c:	48000800 	.word	0x48000800
 8002150:	48000c00 	.word	0x48000c00
 8002154:	40010400 	.word	0x40010400

08002158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	0008      	movs	r0, r1
 8002162:	0011      	movs	r1, r2
 8002164:	1cbb      	adds	r3, r7, #2
 8002166:	1c02      	adds	r2, r0, #0
 8002168:	801a      	strh	r2, [r3, #0]
 800216a:	1c7b      	adds	r3, r7, #1
 800216c:	1c0a      	adds	r2, r1, #0
 800216e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002170:	1c7b      	adds	r3, r7, #1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002178:	1cbb      	adds	r3, r7, #2
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002182:	1cbb      	adds	r3, r7, #2
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e305      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	d100      	bne.n	80021b2 <HAL_RCC_OscConfig+0x1e>
 80021b0:	e08d      	b.n	80022ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021b2:	4bc5      	ldr	r3, [pc, #788]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	220c      	movs	r2, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d00e      	beq.n	80021dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021be:	4bc2      	ldr	r3, [pc, #776]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	220c      	movs	r2, #12
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d116      	bne.n	80021f8 <HAL_RCC_OscConfig+0x64>
 80021ca:	4bbf      	ldr	r3, [pc, #764]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	23c0      	movs	r3, #192	; 0xc0
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	401a      	ands	r2, r3
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10d      	bne.n	80021f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	4bba      	ldr	r3, [pc, #744]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	4013      	ands	r3, r2
 80021e6:	d100      	bne.n	80021ea <HAL_RCC_OscConfig+0x56>
 80021e8:	e070      	b.n	80022cc <HAL_RCC_OscConfig+0x138>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d000      	beq.n	80021f4 <HAL_RCC_OscConfig+0x60>
 80021f2:	e06b      	b.n	80022cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e2dc      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x7c>
 8002200:	4bb1      	ldr	r3, [pc, #708]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4bb0      	ldr	r3, [pc, #704]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0249      	lsls	r1, r1, #9
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e02f      	b.n	8002270 <HAL_RCC_OscConfig+0xdc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x9e>
 8002218:	4bab      	ldr	r3, [pc, #684]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4baa      	ldr	r3, [pc, #680]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800221e:	49ab      	ldr	r1, [pc, #684]	; (80024cc <HAL_RCC_OscConfig+0x338>)
 8002220:	400a      	ands	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	4ba8      	ldr	r3, [pc, #672]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4ba7      	ldr	r3, [pc, #668]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800222a:	49a9      	ldr	r1, [pc, #676]	; (80024d0 <HAL_RCC_OscConfig+0x33c>)
 800222c:	400a      	ands	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e01e      	b.n	8002270 <HAL_RCC_OscConfig+0xdc>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10e      	bne.n	8002258 <HAL_RCC_OscConfig+0xc4>
 800223a:	4ba3      	ldr	r3, [pc, #652]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4ba2      	ldr	r3, [pc, #648]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	02c9      	lsls	r1, r1, #11
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	4b9f      	ldr	r3, [pc, #636]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b9e      	ldr	r3, [pc, #632]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	0249      	lsls	r1, r1, #9
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xdc>
 8002258:	4b9b      	ldr	r3, [pc, #620]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b9a      	ldr	r3, [pc, #616]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800225e:	499b      	ldr	r1, [pc, #620]	; (80024cc <HAL_RCC_OscConfig+0x338>)
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	4b98      	ldr	r3, [pc, #608]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b97      	ldr	r3, [pc, #604]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800226a:	4999      	ldr	r1, [pc, #612]	; (80024d0 <HAL_RCC_OscConfig+0x33c>)
 800226c:	400a      	ands	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d014      	beq.n	80022a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff f964 	bl	8001544 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002282:	f7ff f95f 	bl	8001544 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e28e      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002294:	4b8c      	ldr	r3, [pc, #560]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	4013      	ands	r3, r2
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0xee>
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7ff f94f 	bl	8001544 <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff f94a 	bl	8001544 <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e279      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	4b82      	ldr	r3, [pc, #520]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	4013      	ands	r3, r2
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x118>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	4013      	ands	r3, r2
 80022d6:	d100      	bne.n	80022da <HAL_RCC_OscConfig+0x146>
 80022d8:	e06c      	b.n	80023b4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	220c      	movs	r2, #12
 80022e0:	4013      	ands	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022e4:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	220c      	movs	r2, #12
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d11f      	bne.n	8002330 <HAL_RCC_OscConfig+0x19c>
 80022f0:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	23c0      	movs	r3, #192	; 0xc0
 80022f6:	025b      	lsls	r3, r3, #9
 80022f8:	401a      	ands	r2, r3
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	429a      	cmp	r2, r3
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b71      	ldr	r3, [pc, #452]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2202      	movs	r2, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d005      	beq.n	8002318 <HAL_RCC_OscConfig+0x184>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e24c      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b6b      	ldr	r3, [pc, #428]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	22f8      	movs	r2, #248	; 0xf8
 800231e:	4393      	bics	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00da      	lsls	r2, r3, #3
 8002328:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800232a:	430a      	orrs	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e041      	b.n	80023b4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d024      	beq.n	8002382 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800233e:	2101      	movs	r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7ff f8fe 	bl	8001544 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234e:	f7ff f8f9 	bl	8001544 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e228      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2202      	movs	r2, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d0f1      	beq.n	800234e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	22f8      	movs	r2, #248	; 0xf8
 8002370:	4393      	bics	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	00da      	lsls	r2, r3, #3
 800237a:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e018      	b.n	80023b4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002388:	2101      	movs	r1, #1
 800238a:	438a      	bics	r2, r1
 800238c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff f8d9 	bl	8001544 <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff f8d4 	bl	8001544 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e203      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d1f1      	bne.n	8002398 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2208      	movs	r2, #8
 80023ba:	4013      	ands	r3, r2
 80023bc:	d036      	beq.n	800242c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d019      	beq.n	80023fa <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80023c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff f8b7 	bl	8001544 <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff f8b2 	bl	8001544 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1e1      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d0f1      	beq.n	80023dc <HAL_RCC_OscConfig+0x248>
 80023f8:	e018      	b.n	800242c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fa:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80023fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fe:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002400:	2101      	movs	r1, #1
 8002402:	438a      	bics	r2, r1
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff f89d 	bl	8001544 <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff f898 	bl	8001544 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1c7      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d1f1      	bne.n	8002410 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2204      	movs	r2, #4
 8002432:	4013      	ands	r3, r2
 8002434:	d100      	bne.n	8002438 <HAL_RCC_OscConfig+0x2a4>
 8002436:	e0b5      	b.n	80025a4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002438:	201f      	movs	r0, #31
 800243a:	183b      	adds	r3, r7, r0
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	055b      	lsls	r3, r3, #21
 8002448:	4013      	ands	r3, r2
 800244a:	d110      	bne.n	800246e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0549      	lsls	r1, r1, #21
 8002456:	430a      	orrs	r2, r1
 8002458:	61da      	str	r2, [r3, #28]
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	055b      	lsls	r3, r3, #21
 8002462:	4013      	ands	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002468:	183b      	adds	r3, r7, r0
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_OscConfig+0x340>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d11a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_RCC_OscConfig+0x340>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_RCC_OscConfig+0x340>)
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	0049      	lsls	r1, r1, #1
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002488:	f7ff f85c 	bl	8001544 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7ff f857 	bl	8001544 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e186      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x340>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d10f      	bne.n	80024d8 <HAL_RCC_OscConfig+0x344>
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80024ba:	6a1a      	ldr	r2, [r3, #32]
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <HAL_RCC_OscConfig+0x334>)
 80024be:	2101      	movs	r1, #1
 80024c0:	430a      	orrs	r2, r1
 80024c2:	621a      	str	r2, [r3, #32]
 80024c4:	e036      	b.n	8002534 <HAL_RCC_OscConfig+0x3a0>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	40021000 	.word	0x40021000
 80024cc:	fffeffff 	.word	0xfffeffff
 80024d0:	fffbffff 	.word	0xfffbffff
 80024d4:	40007000 	.word	0x40007000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x366>
 80024e0:	4bb6      	ldr	r3, [pc, #728]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80024e2:	6a1a      	ldr	r2, [r3, #32]
 80024e4:	4bb5      	ldr	r3, [pc, #724]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	438a      	bics	r2, r1
 80024ea:	621a      	str	r2, [r3, #32]
 80024ec:	4bb3      	ldr	r3, [pc, #716]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	4bb2      	ldr	r3, [pc, #712]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80024f2:	2104      	movs	r1, #4
 80024f4:	438a      	bics	r2, r1
 80024f6:	621a      	str	r2, [r3, #32]
 80024f8:	e01c      	b.n	8002534 <HAL_RCC_OscConfig+0x3a0>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x388>
 8002502:	4bae      	ldr	r3, [pc, #696]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002504:	6a1a      	ldr	r2, [r3, #32]
 8002506:	4bad      	ldr	r3, [pc, #692]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002508:	2104      	movs	r1, #4
 800250a:	430a      	orrs	r2, r1
 800250c:	621a      	str	r2, [r3, #32]
 800250e:	4bab      	ldr	r3, [pc, #684]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	4baa      	ldr	r3, [pc, #680]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	621a      	str	r2, [r3, #32]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0x3a0>
 800251c:	4ba7      	ldr	r3, [pc, #668]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800251e:	6a1a      	ldr	r2, [r3, #32]
 8002520:	4ba6      	ldr	r3, [pc, #664]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002522:	2101      	movs	r1, #1
 8002524:	438a      	bics	r2, r1
 8002526:	621a      	str	r2, [r3, #32]
 8002528:	4ba4      	ldr	r3, [pc, #656]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	4ba3      	ldr	r3, [pc, #652]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800252e:	2104      	movs	r1, #4
 8002530:	438a      	bics	r2, r1
 8002532:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d014      	beq.n	8002566 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7ff f802 	bl	8001544 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002544:	e009      	b.n	800255a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe fffd 	bl	8001544 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4a9b      	ldr	r2, [pc, #620]	; (80027c0 <HAL_RCC_OscConfig+0x62c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e12b      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	4b98      	ldr	r3, [pc, #608]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x3b2>
 8002564:	e013      	b.n	800258e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7fe ffed 	bl	8001544 <HAL_GetTick>
 800256a:	0003      	movs	r3, r0
 800256c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256e:	e009      	b.n	8002584 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe ffe8 	bl	8001544 <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	4a91      	ldr	r2, [pc, #580]	; (80027c0 <HAL_RCC_OscConfig+0x62c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e116      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	4b8d      	ldr	r3, [pc, #564]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800258e:	231f      	movs	r3, #31
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002598:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	4b87      	ldr	r3, [pc, #540]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800259e:	4989      	ldr	r1, [pc, #548]	; (80027c4 <HAL_RCC_OscConfig+0x630>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2210      	movs	r2, #16
 80025aa:	4013      	ands	r3, r2
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d12a      	bne.n	800260c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025b6:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80025b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ba:	4b80      	ldr	r3, [pc, #512]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80025bc:	2104      	movs	r1, #4
 80025be:	430a      	orrs	r2, r1
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80025c2:	4b7e      	ldr	r3, [pc, #504]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80025c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c6:	4b7d      	ldr	r3, [pc, #500]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe ffb9 	bl	8001544 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025d8:	f7fe ffb4 	bl	8001544 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0e3      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025ea:	4b74      	ldr	r3, [pc, #464]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d0f1      	beq.n	80025d8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025f4:	4b71      	ldr	r3, [pc, #452]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	22f8      	movs	r2, #248	; 0xf8
 80025fa:	4393      	bics	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	00da      	lsls	r2, r3, #3
 8002604:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002606:	430a      	orrs	r2, r1
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
 800260a:	e034      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	3305      	adds	r3, #5
 8002612:	d111      	bne.n	8002638 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002614:	4b69      	ldr	r3, [pc, #420]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002618:	4b68      	ldr	r3, [pc, #416]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800261a:	2104      	movs	r1, #4
 800261c:	438a      	bics	r2, r1
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002620:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	22f8      	movs	r2, #248	; 0xf8
 8002626:	4393      	bics	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	00da      	lsls	r2, r3, #3
 8002630:	4b62      	ldr	r3, [pc, #392]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002632:	430a      	orrs	r2, r1
 8002634:	635a      	str	r2, [r3, #52]	; 0x34
 8002636:	e01e      	b.n	8002676 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002638:	4b60      	ldr	r3, [pc, #384]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800263a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800263c:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800263e:	2104      	movs	r1, #4
 8002640:	430a      	orrs	r2, r1
 8002642:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002644:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002648:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800264a:	2101      	movs	r1, #1
 800264c:	438a      	bics	r2, r1
 800264e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7fe ff78 	bl	8001544 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800265a:	f7fe ff73 	bl	8001544 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0a2      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d1f1      	bne.n	800265a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d100      	bne.n	8002680 <HAL_RCC_OscConfig+0x4ec>
 800267e:	e097      	b.n	80027b0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002680:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	220c      	movs	r2, #12
 8002686:	4013      	ands	r3, r2
 8002688:	2b08      	cmp	r3, #8
 800268a:	d100      	bne.n	800268e <HAL_RCC_OscConfig+0x4fa>
 800268c:	e06b      	b.n	8002766 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d14c      	bne.n	8002730 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b49      	ldr	r3, [pc, #292]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b48      	ldr	r3, [pc, #288]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800269c:	494a      	ldr	r1, [pc, #296]	; (80027c8 <HAL_RCC_OscConfig+0x634>)
 800269e:	400a      	ands	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe ff4f 	bl	8001544 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe ff4a 	bl	8001544 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e079      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	049b      	lsls	r3, r3, #18
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ca:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	220f      	movs	r2, #15
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x638>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	431a      	orrs	r2, r3
 80026f2:	4b32      	ldr	r3, [pc, #200]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f8:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	0449      	lsls	r1, r1, #17
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe ff1d 	bl	8001544 <HAL_GetTick>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe ff18 	bl	8001544 <HAL_GetTick>
 8002714:	0002      	movs	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e047      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	049b      	lsls	r3, r3, #18
 800272a:	4013      	ands	r3, r2
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x57c>
 800272e:	e03f      	b.n	80027b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002736:	4924      	ldr	r1, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x634>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe ff02 	bl	8001544 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fefd 	bl	8001544 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e02c      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	049b      	lsls	r3, r3, #18
 8002760:	4013      	ands	r3, r2
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x5b2>
 8002764:	e024      	b.n	80027b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e01f      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCC_OscConfig+0x628>)
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	23c0      	movs	r3, #192	; 0xc0
 8002782:	025b      	lsls	r3, r3, #9
 8002784:	401a      	ands	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	429a      	cmp	r2, r3
 800278c:	d10e      	bne.n	80027ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	220f      	movs	r2, #15
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d107      	bne.n	80027ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	23f0      	movs	r3, #240	; 0xf0
 80027a0:	039b      	lsls	r3, r3, #14
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b008      	add	sp, #32
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	40021000 	.word	0x40021000
 80027c0:	00001388 	.word	0x00001388
 80027c4:	efffffff 	.word	0xefffffff
 80027c8:	feffffff 	.word	0xfeffffff
 80027cc:	ffc27fff 	.word	0xffc27fff

080027d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b3      	b.n	800294c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2201      	movs	r2, #1
 80027ea:	4013      	ands	r3, r2
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d911      	bls.n	8002816 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b58      	ldr	r3, [pc, #352]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	4393      	bics	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	4b55      	ldr	r3, [pc, #340]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e09a      	b.n	800294c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2202      	movs	r2, #2
 800281c:	4013      	ands	r3, r2
 800281e:	d015      	beq.n	800284c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2204      	movs	r2, #4
 8002826:	4013      	ands	r3, r2
 8002828:	d006      	beq.n	8002838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800282a:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002830:	21e0      	movs	r1, #224	; 0xe0
 8002832:	00c9      	lsls	r1, r1, #3
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	22f0      	movs	r2, #240	; 0xf0
 800283e:	4393      	bics	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	4b44      	ldr	r3, [pc, #272]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	d040      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	029b      	lsls	r3, r3, #10
 8002866:	4013      	ands	r3, r2
 8002868:	d114      	bne.n	8002894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06e      	b.n	800294c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b38      	ldr	r3, [pc, #224]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	049b      	lsls	r3, r3, #18
 800287e:	4013      	ands	r3, r2
 8002880:	d108      	bne.n	8002894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e062      	b.n	800294c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e05b      	b.n	800294c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2203      	movs	r2, #3
 800289a:	4393      	bics	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fe4c 	bl	8001544 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b0:	e009      	b.n	80028c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b2:	f7fe fe47 	bl	8001544 <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	4a27      	ldr	r2, [pc, #156]	; (800295c <HAL_RCC_ClockConfig+0x18c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e042      	b.n	800294c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	220c      	movs	r2, #12
 80028cc:	401a      	ands	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1ec      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d211      	bcs.n	800290a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2201      	movs	r2, #1
 80028ec:	4393      	bics	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_RCC_ClockConfig+0x184>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	4013      	ands	r3, r2
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e020      	b.n	800294c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2204      	movs	r2, #4
 8002910:	4013      	ands	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_RCC_ClockConfig+0x190>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002928:	f000 f820 	bl	800296c <HAL_RCC_GetSysClockFreq>
 800292c:	0001      	movs	r1, r0
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x188>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	220f      	movs	r2, #15
 8002936:	4013      	ands	r3, r2
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_RCC_ClockConfig+0x194>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	000a      	movs	r2, r1
 800293e:	40da      	lsrs	r2, r3
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_RCC_ClockConfig+0x198>)
 8002942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002944:	2003      	movs	r0, #3
 8002946:	f7fe fdb7 	bl	80014b8 <HAL_InitTick>
  
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40022000 	.word	0x40022000
 8002958:	40021000 	.word	0x40021000
 800295c:	00001388 	.word	0x00001388
 8002960:	fffff8ff 	.word	0xfffff8ff
 8002964:	0800380c 	.word	0x0800380c
 8002968:	20000010 	.word	0x20000010

0800296c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	220c      	movs	r2, #12
 8002990:	4013      	ands	r3, r2
 8002992:	2b04      	cmp	r3, #4
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x30>
 8002996:	2b08      	cmp	r3, #8
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x36>
 800299a:	e02e      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800299e:	613b      	str	r3, [r7, #16]
      break;
 80029a0:	e02e      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	0c9b      	lsrs	r3, r3, #18
 80029a6:	220f      	movs	r2, #15
 80029a8:	4013      	ands	r3, r2
 80029aa:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xa8>)
 80029ac:	5cd3      	ldrb	r3, [r2, r3]
 80029ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xa0>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	220f      	movs	r2, #15
 80029b6:	4013      	ands	r3, r2
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xac>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	23c0      	movs	r3, #192	; 0xc0
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	401a      	ands	r2, r3
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	025b      	lsls	r3, r3, #9
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	480f      	ldr	r0, [pc, #60]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029d2:	f7fd fb99 	bl	8000108 <__udivsi3>
 80029d6:	0003      	movs	r3, r0
 80029d8:	001a      	movs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4353      	muls	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	480a      	ldr	r0, [pc, #40]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029e6:	f7fd fb8f 	bl	8000108 <__udivsi3>
 80029ea:	0003      	movs	r3, r0
 80029ec:	001a      	movs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4353      	muls	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
      break;
 80029f8:	e002      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029fc:	613b      	str	r3, [r7, #16]
      break;
 80029fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a00:	693b      	ldr	r3, [r7, #16]
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b006      	add	sp, #24
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	007a1200 	.word	0x007a1200
 8002a14:	0800381c 	.word	0x0800381c
 8002a18:	0800382c 	.word	0x0800382c

08002a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e042      	b.n	8002ab4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223d      	movs	r2, #61	; 0x3d
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	223c      	movs	r2, #60	; 0x3c
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7fe fbcd 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	223d      	movs	r2, #61	; 0x3d
 8002a4e:	2102      	movs	r1, #2
 8002a50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	f000 fb6d 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2246      	movs	r2, #70	; 0x46
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223e      	movs	r2, #62	; 0x3e
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	223f      	movs	r2, #63	; 0x3f
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2240      	movs	r2, #64	; 0x40
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2241      	movs	r2, #65	; 0x41
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2242      	movs	r2, #66	; 0x42
 8002a8e:	2101      	movs	r1, #1
 8002a90:	5499      	strb	r1, [r3, r2]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2243      	movs	r2, #67	; 0x43
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2244      	movs	r2, #68	; 0x44
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2245      	movs	r2, #69	; 0x45
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	223d      	movs	r2, #61	; 0x3d
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	223d      	movs	r2, #61	; 0x3d
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d001      	beq.n	8002ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e030      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223d      	movs	r2, #61	; 0x3d
 8002ad8:	2102      	movs	r1, #2
 8002ada:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <HAL_TIM_Base_Start_IT+0x84>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x44>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <HAL_TIM_Base_Start_IT+0x88>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2207      	movs	r2, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400

08002b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e042      	b.n	8002be0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	223d      	movs	r2, #61	; 0x3d
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	223c      	movs	r2, #60	; 0x3c
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f7fe fb03 	bl	800117c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223d      	movs	r2, #61	; 0x3d
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	0019      	movs	r1, r3
 8002b88:	0010      	movs	r0, r2
 8002b8a:	f000 fad7 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2246      	movs	r2, #70	; 0x46
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	223e      	movs	r2, #62	; 0x3e
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2241      	movs	r2, #65	; 0x41
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2242      	movs	r2, #66	; 0x42
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2243      	movs	r2, #67	; 0x43
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2244      	movs	r2, #68	; 0x44
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2245      	movs	r2, #69	; 0x45
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223d      	movs	r2, #61	; 0x3d
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d108      	bne.n	8002c0a <HAL_TIM_PWM_Start+0x22>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	223e      	movs	r2, #62	; 0x3e
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	4193      	sbcs	r3, r2
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e01f      	b.n	8002c4a <HAL_TIM_PWM_Start+0x62>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d108      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x3a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	223f      	movs	r2, #63	; 0x3f
 8002c14:	5c9b      	ldrb	r3, [r3, r2]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	4193      	sbcs	r3, r2
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	e013      	b.n	8002c4a <HAL_TIM_PWM_Start+0x62>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d108      	bne.n	8002c3a <HAL_TIM_PWM_Start+0x52>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	4193      	sbcs	r3, r2
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	e007      	b.n	8002c4a <HAL_TIM_PWM_Start+0x62>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2241      	movs	r2, #65	; 0x41
 8002c3e:	5c9b      	ldrb	r3, [r3, r2]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	4193      	sbcs	r3, r2
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e064      	b.n	8002d1c <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x7a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	223e      	movs	r2, #62	; 0x3e
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	5499      	strb	r1, [r3, r2]
 8002c60:	e013      	b.n	8002c8a <HAL_TIM_PWM_Start+0xa2>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x8a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	223f      	movs	r2, #63	; 0x3f
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	5499      	strb	r1, [r3, r2]
 8002c70:	e00b      	b.n	8002c8a <HAL_TIM_PWM_Start+0xa2>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x9a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	5499      	strb	r1, [r3, r2]
 8002c80:	e003      	b.n	8002c8a <HAL_TIM_PWM_Start+0xa2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2241      	movs	r2, #65	; 0x41
 8002c86:	2102      	movs	r1, #2
 8002c88:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 fc9e 	bl	80035d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_TIM_PWM_Start+0x13c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0xce>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <HAL_TIM_PWM_Start+0x140>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0xce>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_TIM_PWM_Start+0x144>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_PWM_Start+0xd2>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_TIM_PWM_Start+0xd4>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	0209      	lsls	r1, r1, #8
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <HAL_TIM_PWM_Start+0x13c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0xfe>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <HAL_TIM_PWM_Start+0x148>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d111      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2207      	movs	r2, #7
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d010      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	e007      	b.n	8002d1a <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800
 8002d30:	40000400 	.word	0x40000400

08002d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d124      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d11d      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4252      	negs	r2, r2
 8002d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	4013      	ands	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f9c8 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e007      	b.n	8002d8e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f9bb 	bl	80030fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f9c7 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d125      	bne.n	8002dee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2204      	movs	r2, #4
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d11e      	bne.n	8002dee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2205      	movs	r2, #5
 8002db6:	4252      	negs	r2, r2
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	23c0      	movs	r3, #192	; 0xc0
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 f99b 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 f98e 	bl	80030fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 f99a 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2208      	movs	r2, #8
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d124      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2208      	movs	r2, #8
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d11d      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2209      	movs	r2, #9
 8002e10:	4252      	negs	r2, r2
 8002e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2204      	movs	r2, #4
 8002e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	2203      	movs	r2, #3
 8002e22:	4013      	ands	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 f96f 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002e2e:	e007      	b.n	8002e40 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f962 	bl	80030fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f96e 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d125      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d11e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2211      	movs	r2, #17
 8002e68:	4252      	negs	r2, r2
 8002e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2208      	movs	r2, #8
 8002e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	23c0      	movs	r3, #192	; 0xc0
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 f942 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002e88:	e007      	b.n	8002e9a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f935 	bl	80030fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 f941 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10f      	bne.n	8002ece <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d108      	bne.n	8002ece <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4252      	negs	r2, r2
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f90f 	bl	80030ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d10f      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d108      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2281      	movs	r2, #129	; 0x81
 8002ef0:	4252      	negs	r2, r2
 8002ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 fc48 	bl	800378c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d10f      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d108      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2241      	movs	r2, #65	; 0x41
 8002f1e:	4252      	negs	r2, r2
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f901 	bl	800312c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2220      	movs	r2, #32
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d10f      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d108      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2221      	movs	r2, #33	; 0x21
 8002f4c:	4252      	negs	r2, r2
 8002f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 fc12 	bl	800377c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2317      	movs	r3, #23
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	223c      	movs	r2, #60	; 0x3c
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0ad      	b.n	80030de <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	223c      	movs	r2, #60	; 0x3c
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0c      	cmp	r3, #12
 8002f8e:	d100      	bne.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f90:	e076      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d900      	bls.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002f98:	e095      	b.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d04e      	beq.n	800303e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d900      	bls.n	8002fa8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002fa6:	e08e      	b.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d021      	beq.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002fb4:	e087      	b.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	0011      	movs	r1, r2
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f928 	bl	8003214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2108      	movs	r1, #8
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2104      	movs	r1, #4
 8002fe0:	438a      	bics	r2, r1
 8002fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6999      	ldr	r1, [r3, #24]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	619a      	str	r2, [r3, #24]
      break;
 8002ff6:	e06b      	b.n	80030d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	0011      	movs	r1, r2
 8003000:	0018      	movs	r0, r3
 8003002:	f000 f985 	bl	8003310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0109      	lsls	r1, r1, #4
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4931      	ldr	r1, [pc, #196]	; (80030e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003024:	400a      	ands	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6999      	ldr	r1, [r3, #24]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	021a      	lsls	r2, r3, #8
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	619a      	str	r2, [r3, #24]
      break;
 800303c:	e048      	b.n	80030d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	0011      	movs	r1, r2
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f9e0 	bl	800340c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2108      	movs	r1, #8
 8003058:	430a      	orrs	r2, r1
 800305a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2104      	movs	r1, #4
 8003068:	438a      	bics	r2, r1
 800306a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69d9      	ldr	r1, [r3, #28]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	61da      	str	r2, [r3, #28]
      break;
 800307e:	e027      	b.n	80030d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f000 fa3f 	bl	800350c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	0109      	lsls	r1, r1, #4
 800309c:	430a      	orrs	r2, r1
 800309e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	490f      	ldr	r1, [pc, #60]	; (80030e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69d9      	ldr	r1, [r3, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	021a      	lsls	r2, r3, #8
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]
      break;
 80030c4:	e004      	b.n	80030d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80030c6:	2317      	movs	r3, #23
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
      break;
 80030ce:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	223c      	movs	r2, #60	; 0x3c
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

  return status;
 80030d8:	2317      	movs	r3, #23
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b006      	add	sp, #24
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	fffffbff 	.word	0xfffffbff

080030ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a2b      	ldr	r2, [pc, #172]	; (80031fc <TIM_Base_SetConfig+0xc0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x20>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <TIM_Base_SetConfig+0xc4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2270      	movs	r2, #112	; 0x70
 8003160:	4393      	bics	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a22      	ldr	r2, [pc, #136]	; (80031fc <TIM_Base_SetConfig+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a21      	ldr	r2, [pc, #132]	; (8003200 <TIM_Base_SetConfig+0xc4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a20      	ldr	r2, [pc, #128]	; (8003204 <TIM_Base_SetConfig+0xc8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <TIM_Base_SetConfig+0xcc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x5a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <TIM_Base_SetConfig+0xd0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <TIM_Base_SetConfig+0xd4>)
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	4393      	bics	r3, r2
 80031ae:	001a      	movs	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <TIM_Base_SetConfig+0xc0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <TIM_Base_SetConfig+0xcc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0xaa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <TIM_Base_SetConfig+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d103      	bne.n	80031ee <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	615a      	str	r2, [r3, #20]
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b004      	add	sp, #16
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40002000 	.word	0x40002000
 8003208:	40014400 	.word	0x40014400
 800320c:	40014800 	.word	0x40014800
 8003210:	fffffcff 	.word	0xfffffcff

08003214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	2201      	movs	r2, #1
 8003224:	4393      	bics	r3, r2
 8003226:	001a      	movs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2270      	movs	r2, #112	; 0x70
 8003242:	4393      	bics	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2203      	movs	r2, #3
 800324a:	4393      	bics	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2202      	movs	r2, #2
 800325c:	4393      	bics	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a23      	ldr	r2, [pc, #140]	; (80032fc <TIM_OC1_SetConfig+0xe8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <TIM_OC1_SetConfig+0x6e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <TIM_OC1_SetConfig+0xec>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_OC1_SetConfig+0x6e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a21      	ldr	r2, [pc, #132]	; (8003304 <TIM_OC1_SetConfig+0xf0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10c      	bne.n	800329c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2208      	movs	r2, #8
 8003286:	4393      	bics	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2204      	movs	r2, #4
 8003298:	4393      	bics	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a17      	ldr	r2, [pc, #92]	; (80032fc <TIM_OC1_SetConfig+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_OC1_SetConfig+0xa0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <TIM_OC1_SetConfig+0xec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_OC1_SetConfig+0xa0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <TIM_OC1_SetConfig+0xf0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d111      	bne.n	80032d8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4a14      	ldr	r2, [pc, #80]	; (8003308 <TIM_OC1_SetConfig+0xf4>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <TIM_OC1_SetConfig+0xf8>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b006      	add	sp, #24
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40014400 	.word	0x40014400
 8003304:	40014800 	.word	0x40014800
 8003308:	fffffeff 	.word	0xfffffeff
 800330c:	fffffdff 	.word	0xfffffdff

08003310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	2210      	movs	r2, #16
 8003320:	4393      	bics	r3, r2
 8003322:	001a      	movs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <TIM_OC2_SetConfig+0xe0>)
 800333e:	4013      	ands	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <TIM_OC2_SetConfig+0xe4>)
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2220      	movs	r2, #32
 800335a:	4393      	bics	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <TIM_OC2_SetConfig+0xe8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10d      	bne.n	800338e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	4393      	bics	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	4393      	bics	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <TIM_OC2_SetConfig+0xe8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <TIM_OC2_SetConfig+0x96>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a18      	ldr	r2, [pc, #96]	; (80033fc <TIM_OC2_SetConfig+0xec>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_OC2_SetConfig+0x96>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <TIM_OC2_SetConfig+0xf0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4a16      	ldr	r2, [pc, #88]	; (8003404 <TIM_OC2_SetConfig+0xf4>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <TIM_OC2_SetConfig+0xf8>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b006      	add	sp, #24
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	ffff8fff 	.word	0xffff8fff
 80033f4:	fffffcff 	.word	0xfffffcff
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40014400 	.word	0x40014400
 8003400:	40014800 	.word	0x40014800
 8003404:	fffffbff 	.word	0xfffffbff
 8003408:	fffff7ff 	.word	0xfffff7ff

0800340c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a33      	ldr	r2, [pc, #204]	; (80034e8 <TIM_OC3_SetConfig+0xdc>)
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2270      	movs	r2, #112	; 0x70
 8003438:	4393      	bics	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2203      	movs	r2, #3
 8003440:	4393      	bics	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <TIM_OC3_SetConfig+0xe0>)
 8003452:	4013      	ands	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <TIM_OC3_SetConfig+0xe4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10d      	bne.n	8003486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <TIM_OC3_SetConfig+0xe8>)
 800346e:	4013      	ands	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <TIM_OC3_SetConfig+0xec>)
 8003482:	4013      	ands	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <TIM_OC3_SetConfig+0xe4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <TIM_OC3_SetConfig+0x92>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <TIM_OC3_SetConfig+0xf0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_OC3_SetConfig+0x92>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <TIM_OC3_SetConfig+0xf4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d113      	bne.n	80034c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <TIM_OC3_SetConfig+0xf8>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <TIM_OC3_SetConfig+0xfc>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	621a      	str	r2, [r3, #32]
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b006      	add	sp, #24
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	fffffeff 	.word	0xfffffeff
 80034ec:	fffffdff 	.word	0xfffffdff
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	fffff7ff 	.word	0xfffff7ff
 80034f8:	fffffbff 	.word	0xfffffbff
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800
 8003504:	ffffefff 	.word	0xffffefff
 8003508:	ffffdfff 	.word	0xffffdfff

0800350c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <TIM_OC4_SetConfig+0xa8>)
 800351c:	401a      	ands	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <TIM_OC4_SetConfig+0xac>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <TIM_OC4_SetConfig+0xb0>)
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <TIM_OC4_SetConfig+0xb4>)
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <TIM_OC4_SetConfig+0xb8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_OC4_SetConfig+0x70>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <TIM_OC4_SetConfig+0xbc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_OC4_SetConfig+0x70>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a15      	ldr	r2, [pc, #84]	; (80035cc <TIM_OC4_SetConfig+0xc0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d109      	bne.n	8003590 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <TIM_OC4_SetConfig+0xc4>)
 8003580:	4013      	ands	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	019b      	lsls	r3, r3, #6
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b006      	add	sp, #24
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	ffffefff 	.word	0xffffefff
 80035b8:	ffff8fff 	.word	0xffff8fff
 80035bc:	fffffcff 	.word	0xfffffcff
 80035c0:	ffffdfff 	.word	0xffffdfff
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40014400 	.word	0x40014400
 80035cc:	40014800 	.word	0x40014800
 80035d0:	ffffbfff 	.word	0xffffbfff

080035d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	221f      	movs	r2, #31
 80035e4:	4013      	ands	r3, r2
 80035e6:	2201      	movs	r2, #1
 80035e8:	409a      	lsls	r2, r3
 80035ea:	0013      	movs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	43d2      	mvns	r2, r2
 80035f6:	401a      	ands	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	211f      	movs	r1, #31
 8003604:	400b      	ands	r3, r1
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4099      	lsls	r1, r3
 800360a:	000b      	movs	r3, r1
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b006      	add	sp, #24
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223c      	movs	r2, #60	; 0x3c
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003630:	2302      	movs	r3, #2
 8003632:	e03c      	b.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	223c      	movs	r2, #60	; 0x3c
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	223d      	movs	r2, #61	; 0x3d
 8003640:	2102      	movs	r1, #2
 8003642:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2270      	movs	r2, #112	; 0x70
 8003658:	4393      	bics	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0f      	ldr	r2, [pc, #60]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10c      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	4393      	bics	r3, r2
 8003688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4313      	orrs	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	223d      	movs	r2, #61	; 0x3d
 80036a0:	2101      	movs	r1, #1
 80036a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	223c      	movs	r2, #60	; 0x3c
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40000400 	.word	0x40000400

080036c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	223c      	movs	r2, #60	; 0x3c
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036d8:	2302      	movs	r3, #2
 80036da:	e03e      	b.n	800375a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	223c      	movs	r2, #60	; 0x3c
 80036e0:	2101      	movs	r1, #1
 80036e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	22ff      	movs	r2, #255	; 0xff
 80036e8:	4393      	bics	r3, r2
 80036ea:	001a      	movs	r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80036f8:	401a      	ands	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003706:	401a      	ands	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003714:	401a      	ands	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003722:	401a      	ands	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003730:	401a      	ands	r2, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800373e:	401a      	ands	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	223c      	movs	r2, #60	; 0x3c
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	fffffcff 	.word	0xfffffcff
 8003768:	fffffbff 	.word	0xfffffbff
 800376c:	fffff7ff 	.word	0xfffff7ff
 8003770:	ffffefff 	.word	0xffffefff
 8003774:	ffffdfff 	.word	0xffffdfff
 8003778:	ffffbfff 	.word	0xffffbfff

0800377c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}

0800379c <memset>:
 800379c:	0003      	movs	r3, r0
 800379e:	1882      	adds	r2, r0, r2
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d100      	bne.n	80037a6 <memset+0xa>
 80037a4:	4770      	bx	lr
 80037a6:	7019      	strb	r1, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	e7f9      	b.n	80037a0 <memset+0x4>

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	2600      	movs	r6, #0
 80037b0:	4c0c      	ldr	r4, [pc, #48]	; (80037e4 <__libc_init_array+0x38>)
 80037b2:	4d0d      	ldr	r5, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b4:	1b64      	subs	r4, r4, r5
 80037b6:	10a4      	asrs	r4, r4, #2
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	2600      	movs	r6, #0
 80037be:	f000 f819 	bl	80037f4 <_init>
 80037c2:	4c0a      	ldr	r4, [pc, #40]	; (80037ec <__libc_init_array+0x40>)
 80037c4:	4d0a      	ldr	r5, [pc, #40]	; (80037f0 <__libc_init_array+0x44>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	00b3      	lsls	r3, r6, #2
 80037d2:	58eb      	ldr	r3, [r5, r3]
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	00b3      	lsls	r3, r6, #2
 80037dc:	58eb      	ldr	r3, [r5, r3]
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	0800383c 	.word	0x0800383c
 80037e8:	0800383c 	.word	0x0800383c
 80037ec:	08003840 	.word	0x08003840
 80037f0:	0800383c 	.word	0x0800383c

080037f4 <_init>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr

08003800 <_fini>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003806:	bc08      	pop	{r3}
 8003808:	469e      	mov	lr, r3
 800380a:	4770      	bx	lr
